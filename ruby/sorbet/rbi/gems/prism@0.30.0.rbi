# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `prism` gem.
# Please instead update this file by running `bin/tapioca gem prism`.


# typed: strict

# =begin
# This file is generated by the templates/template.rb script and should not be
# modified manually. See templates/rbi/prism/node.rbi.erb
# if you are looking to modify the template
# =end
# =begin
# This file is generated by the templates/template.rb script and should not be
# modified manually. See templates/rbi/prism/visitor.rbi.erb
# if you are looking to modify the template
# =end

# We keep these shims in here because our client libraries might not have parser
# in their bundle.
module Parser; end

class Parser::Base; end

module Prism
  class << self
    sig do
      params(
        source: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        filepath: T.nilable(String),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(String)
    end
    def dump(source, command_line: nil, encoding: nil, filepath: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        filepath: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(String)
    end
    def dump_file(filepath, command_line: nil, encoding: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        source: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        filepath: T.nilable(String),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(Prism::LexResult)
    end
    def lex(source, command_line: nil, encoding: nil, filepath: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig { params(source: String, options: T::Hash[Symbol, T.untyped]).returns(Prism::LexCompat::Result) }
    def lex_compat(source, **options); end

    sig do
      params(
        filepath: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(Prism::LexResult)
    end
    def lex_file(filepath, command_line: nil, encoding: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig { params(source: String).returns(T::Array[T.untyped]) }
    def lex_ripper(source); end

    sig { params(source: String, serialized: String).returns(Prism::ParseResult) }
    def load(source, serialized); end

    sig do
      params(
        source: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        filepath: T.nilable(String),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(Prism::ParseResult)
    end
    def parse(source, command_line: nil, encoding: nil, filepath: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        source: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        filepath: T.nilable(String),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(T::Array[Prism::Comment])
    end
    def parse_comments(source, command_line: nil, encoding: nil, filepath: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        source: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        filepath: T.nilable(String),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(T::Boolean)
    end
    def parse_failure?(source, command_line: nil, encoding: nil, filepath: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        filepath: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(Prism::ParseResult)
    end
    def parse_file(filepath, command_line: nil, encoding: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        filepath: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(T::Array[Prism::Comment])
    end
    def parse_file_comments(filepath, command_line: nil, encoding: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        filepath: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(T::Boolean)
    end
    def parse_file_failure?(filepath, command_line: nil, encoding: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        filepath: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(T::Boolean)
    end
    def parse_file_success?(filepath, command_line: nil, encoding: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        source: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        filepath: T.nilable(String),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(Prism::ParseLexResult)
    end
    def parse_lex(source, command_line: nil, encoding: nil, filepath: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        filepath: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(Prism::ParseLexResult)
    end
    def parse_lex_file(filepath, command_line: nil, encoding: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        stream: T.any(IO, StringIO),
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        filepath: T.nilable(String),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(Prism::ParseResult)
    end
    def parse_stream(stream, command_line: nil, encoding: nil, filepath: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        source: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        filepath: T.nilable(String),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).returns(T::Boolean)
    end
    def parse_success?(source, command_line: nil, encoding: nil, filepath: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        source: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        filepath: T.nilable(String),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).void
    end
    def profile(source, command_line: nil, encoding: nil, filepath: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end

    sig do
      params(
        filepath: String,
        command_line: T.nilable(String),
        encoding: T.nilable(T.any(String, Encoding)),
        frozen_string_literal: T.nilable(T::Boolean),
        line: T.nilable(Integer),
        scopes: T.nilable(T::Array[T::Array[Symbol]]),
        version: T.nilable(String)
      ).void
    end
    def profile_file(filepath, command_line: nil, encoding: nil, frozen_string_literal: nil, line: nil, scopes: nil, version: nil); end
  end
end

class Prism::ASCIISource < Prism::Source
  sig { params(byte_offset: Integer).returns(Integer) }
  def character_column(byte_offset); end

  sig { params(byte_offset: Integer).returns(Integer) }
  def character_offset(byte_offset); end

  sig { params(byte_offset: Integer, encoding: Encoding).returns(Integer) }
  def code_units_column(byte_offset, encoding); end

  sig { params(byte_offset: Integer, encoding: Encoding).returns(Integer) }
  def code_units_offset(byte_offset, encoding); end
end

# Represents the use of the `alias` keyword to alias a global variable.
#
#     alias $foo $bar
#     ^^^^^^^^^^^^^^^
class Prism::AliasGlobalVariableNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      new_name: Prism::Node,
      old_name: Prism::Node,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, new_name, old_name, keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      new_name: Prism::Node,
      old_name: Prism::Node,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::AliasGlobalVariableNode)
  end
  def copy(new_name: self.new_name, old_name: self.old_name, keyword_loc: self.keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(Prism::Node) }
  def new_name; end

  sig { returns(Prism::Node) }
  def old_name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `alias` keyword to alias a method.
#
#     alias foo bar
#     ^^^^^^^^^^^^^
class Prism::AliasMethodNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      new_name: Prism::Node,
      old_name: Prism::Node,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, new_name, old_name, keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      new_name: Prism::Node,
      old_name: Prism::Node,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::AliasMethodNode)
  end
  def copy(new_name: self.new_name, old_name: self.old_name, keyword_loc: self.keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(Prism::Node) }
  def new_name; end

  sig { returns(Prism::Node) }
  def old_name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents an alternation pattern in pattern matching.
#
#     foo => bar | baz
#            ^^^^^^^^^
class Prism::AlternationPatternNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, left, right, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::AlternationPatternNode)
  end
  def copy(left: self.left, right: self.right, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Prism::Node) }
  def left; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(Prism::Node) }
  def right; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `&&` operator or the `and` keyword.
#
#     left and right
#     ^^^^^^^^^^^^^^
class Prism::AndNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, left, right, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::AndNode)
  end
  def copy(left: self.left, right: self.right, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Prism::Node) }
  def left; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(Prism::Node) }
  def right; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a set of arguments to a method or a keyword.
#
#     return foo, bar, baz
#            ^^^^^^^^^^^^^
class Prism::ArgumentsNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      arguments: T::Array[Prism::Node],
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, arguments, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Array[Prism::Node]) }
  def arguments; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(T::Boolean) }
  def contains_keyword_splat?; end

  sig { returns(T::Boolean) }
  def contains_keywords?; end

  sig do
    params(
      flags: Integer,
      arguments: T::Array[Prism::Node],
      location: Prism::Location
    ).returns(Prism::ArgumentsNode)
  end
  def copy(flags: self.flags, arguments: self.arguments, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Flags for arguments nodes.
module Prism::ArgumentsNodeFlags
  # if arguments contain keywords
  CONTAINS_KEYWORDS = T.let(1 << 0, Integer)

  # if arguments contain keyword splat
  CONTAINS_KEYWORD_SPLAT = T.let(1 << 1, Integer)
end

# Represents an array literal. This can be a regular array using brackets or a special array using % like %w or %i.
#
#     [1, 2, 3]
#     ^^^^^^^^^
class Prism::ArrayNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      elements: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, elements, opening_loc, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T.nilable(String)) }
  def closing; end

  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(T::Boolean) }
  def contains_splat?; end

  sig do
    params(
      flags: Integer,
      elements: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::ArrayNode)
  end
  def copy(flags: self.flags, elements: self.elements, opening_loc: self.opening_loc, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Array[Prism::Node]) }
  def elements; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(String)) }
  def opening; end

  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Flags for array nodes.
module Prism::ArrayNodeFlags
  # if array contains splat nodes
  CONTAINS_SPLAT = T.let(1 << 0, Integer)
end

# Represents an array pattern in pattern matching.
#
#     foo in 1, 2
#     ^^^^^^^^^^^
#
#     foo in [1, 2]
#     ^^^^^^^^^^^^^
#
#     foo in *1
#     ^^^^^^^^^
#
#     foo in Bar[]
#     ^^^^^^^^^^^^
#
#     foo in Bar[1, 2, 3]
#     ^^^^^^^^^^^^^^^^^^^
class Prism::ArrayPatternNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      constant: T.nilable(Prism::Node),
      requireds: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      posts: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, constant, requireds, rest, posts, opening_loc, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T.nilable(String)) }
  def closing; end

  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  sig do
    params(
      constant: T.nilable(Prism::Node),
      requireds: T::Array[Prism::Node],
      rest: T.nilable(Prism::Node),
      posts: T::Array[Prism::Node],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::ArrayPatternNode)
  end
  def copy(constant: self.constant, requireds: self.requireds, rest: self.rest, posts: self.posts, opening_loc: self.opening_loc, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(String)) }
  def opening; end

  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  sig { returns(T::Array[Prism::Node]) }
  def posts; end

  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a hash key/value pair.
#
#     { a => b }
#       ^^^^^^
class Prism::AssocNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      key: Prism::Node,
      value: Prism::Node,
      operator_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, key, value, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      key: Prism::Node,
      value: Prism::Node,
      operator_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::AssocNode)
  end
  def copy(key: self.key, value: self.value, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Prism::Node) }
  def key; end

  sig { returns(T.nilable(String)) }
  def operator; end

  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents a splat in a hash literal.
#
#     { **foo }
#       ^^^^^
class Prism::AssocSplatNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      value: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, value, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      value: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::AssocSplatNode)
  end
  def copy(value: self.value, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(T.nilable(Prism::Node)) }
  def value; end
end

# Represents reading a reference to a field in the previous match.
#
#     $'
#     ^^
class Prism::BackReferenceReadNode < Prism::Node
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(name: Symbol, location: Prism::Location).returns(Prism::BackReferenceReadNode) }
  def copy(name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { override.returns(Symbol) }
  def type; end
end

class Prism::BasicVisitor
  sig { params(node: T.nilable(Prism::Node)).void }
  def visit(node); end

  sig { params(nodes: T::Array[T.nilable(Prism::Node)]).void }
  def visit_all(nodes); end

  sig { params(node: Prism::Node).void }
  def visit_child_nodes(node); end
end

# Represents a begin statement.
#
#     begin
#       foo
#     end
#     ^^^^^
class Prism::BeginNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      begin_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      rescue_clause: T.nilable(Prism::RescueNode),
      else_clause: T.nilable(Prism::ElseNode),
      ensure_clause: T.nilable(Prism::EnsureNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, begin_keyword_loc, statements, rescue_clause, else_clause, ensure_clause, end_keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(String)) }
  def begin_keyword; end

  sig { returns(T.nilable(Prism::Location)) }
  def begin_keyword_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      begin_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      rescue_clause: T.nilable(Prism::RescueNode),
      else_clause: T.nilable(Prism::ElseNode),
      ensure_clause: T.nilable(Prism::EnsureNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::BeginNode)
  end
  def copy(begin_keyword_loc: self.begin_keyword_loc, statements: self.statements, rescue_clause: self.rescue_clause, else_clause: self.else_clause, ensure_clause: self.ensure_clause, end_keyword_loc: self.end_keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T.nilable(Prism::ElseNode)) }
  def else_clause; end

  sig { returns(T.nilable(String)) }
  def end_keyword; end

  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  sig { returns(T.nilable(Prism::EnsureNode)) }
  def ensure_clause; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Prism::RescueNode)) }
  def rescue_clause; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents block method arguments.
#
#     bar(&args)
#     ^^^^^^^^^^
class Prism::BlockArgumentNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      expression: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, expression, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      expression: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::BlockArgumentNode)
  end
  def copy(expression: self.expression, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T.nilable(Prism::Node)) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a block local variable.
#
#     a { |; b| }
#            ^
class Prism::BlockLocalVariableNode < Prism::Node
  sig { params(source: Prism::Source, flags: Integer, name: Symbol, location: Prism::Location).void }
  def initialize(source, flags, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(flags: Integer, name: Symbol, location: Prism::Location).returns(Prism::BlockLocalVariableNode) }
  def copy(flags: self.flags, name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a block of ruby code.
#
#     [1, 2, 3].each { |i| puts x }
#                    ^^^^^^^^^^^^^^
class Prism::BlockNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      locals: T::Array[Symbol],
      parameters: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, locals, parameters, body, opening_loc, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      locals: T::Array[Symbol],
      parameters: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::BlockNode)
  end
  def copy(locals: self.locals, parameters: self.parameters, body: self.body, opening_loc: self.opening_loc, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Array[Symbol]) }
  def locals; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def parameters; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a block parameter to a method, block, or lambda definition.
#
#     def a(&b)
#           ^^
#     end
class Prism::BlockParameterNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, name, name_loc, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::BlockParameterNode)
  end
  def copy(flags: self.flags, name: self.name, name_loc: self.name_loc, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Symbol)) }
  def name; end

  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a block's parameters declaration.
#
#     -> (a, b = 1; local) { }
#        ^^^^^^^^^^^^^^^^^
#
#     foo do |a, b = 1; local|
#            ^^^^^^^^^^^^^^^^^
#     end
class Prism::BlockParametersNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      parameters: T.nilable(Prism::ParametersNode),
      locals: T::Array[Prism::BlockLocalVariableNode],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, parameters, locals, opening_loc, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T.nilable(String)) }
  def closing; end

  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      parameters: T.nilable(Prism::ParametersNode),
      locals: T::Array[Prism::BlockLocalVariableNode],
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::BlockParametersNode)
  end
  def copy(parameters: self.parameters, locals: self.locals, opening_loc: self.opening_loc, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Array[Prism::BlockLocalVariableNode]) }
  def locals; end

  sig { returns(T.nilable(String)) }
  def opening; end

  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  sig { returns(T.nilable(Prism::ParametersNode)) }
  def parameters; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `break` keyword.
#
#     break foo
#     ^^^^^^^^^
class Prism::BreakNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, arguments, keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::BreakNode)
  end
  def copy(arguments: self.arguments, keyword_loc: self.keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `&&=` operator on a call.
#
#     foo.bar &&= value
#     ^^^^^^^^^^^^^^^^^
class Prism::CallAndWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Boolean) }
  def attribute_write?; end

  sig { returns(T.nilable(String)) }
  def call_operator; end

  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::CallAndWriteNode)
  end
  def copy(flags: self.flags, receiver: self.receiver, call_operator_loc: self.call_operator_loc, message_loc: self.message_loc, read_name: self.read_name, write_name: self.write_name, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(String)) }
  def message; end

  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(Symbol) }
  def read_name; end

  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  sig { returns(T::Boolean) }
  def safe_navigation?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end

  sig { returns(T::Boolean) }
  def variable_call?; end

  sig { returns(Symbol) }
  def write_name; end
end

# Represents a method call, in all of the various forms that can take.
#
#     foo
#     ^^^
#
#     foo()
#     ^^^^^
#
#     +foo
#     ^^^^
#
#     foo + bar
#     ^^^^^^^^^
#
#     foo.bar
#     ^^^^^^^
#
#     foo&.bar
#     ^^^^^^^^
class Prism::CallNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      name: Symbol,
      message_loc: T.nilable(Prism::Location),
      opening_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: T.nilable(Prism::Location),
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, name, message_loc, opening_loc, arguments, closing_loc, block, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  sig { returns(T::Boolean) }
  def attribute_write?; end

  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  sig { returns(T.nilable(String)) }
  def call_operator; end

  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T.nilable(String)) }
  def closing; end

  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      name: Symbol,
      message_loc: T.nilable(Prism::Location),
      opening_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: T.nilable(Prism::Location),
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).returns(Prism::CallNode)
  end
  def copy(flags: self.flags, receiver: self.receiver, call_operator_loc: self.call_operator_loc, name: self.name, message_loc: self.message_loc, opening_loc: self.opening_loc, arguments: self.arguments, closing_loc: self.closing_loc, block: self.block, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T.nilable(Prism::Location)) }
  def full_message_loc; end

  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(String)) }
  def message; end

  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(T.nilable(String)) }
  def opening; end

  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  sig { returns(T::Boolean) }
  def safe_navigation?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(T::Boolean) }
  def variable_call?; end
end

# Flags for call nodes.
module Prism::CallNodeFlags
  # a call that is an attribute write, so the value being written should be returned
  ATTRIBUTE_WRITE = T.let(1 << 2, Integer)

  # a call that ignores method visibility
  IGNORE_VISIBILITY = T.let(1 << 3, Integer)

  # &. operator
  SAFE_NAVIGATION = T.let(1 << 0, Integer)

  # a call that could have been a local variable
  VARIABLE_CALL = T.let(1 << 1, Integer)
end

# Represents the use of an assignment operator on a call.
#
#     foo.bar += baz
#     ^^^^^^^^^^^^^^
class Prism::CallOperatorWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, message_loc, read_name, write_name, binary_operator, binary_operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Boolean) }
  def attribute_write?; end

  sig { returns(Symbol) }
  def binary_operator; end

  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  sig { returns(T.nilable(String)) }
  def call_operator; end

  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::CallOperatorWriteNode)
  end
  def copy(flags: self.flags, receiver: self.receiver, call_operator_loc: self.call_operator_loc, message_loc: self.message_loc, read_name: self.read_name, write_name: self.write_name, binary_operator: self.binary_operator, binary_operator_loc: self.binary_operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(String)) }
  def message; end

  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  sig { returns(Symbol) }
  def read_name; end

  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  sig { returns(T::Boolean) }
  def safe_navigation?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end

  sig { returns(T::Boolean) }
  def variable_call?; end

  sig { returns(Symbol) }
  def write_name; end
end

# Represents the use of the `||=` operator on a call.
#
#     foo.bar ||= value
#     ^^^^^^^^^^^^^^^^^
class Prism::CallOrWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, message_loc, read_name, write_name, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Boolean) }
  def attribute_write?; end

  sig { returns(T.nilable(String)) }
  def call_operator; end

  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      message_loc: T.nilable(Prism::Location),
      read_name: Symbol,
      write_name: Symbol,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::CallOrWriteNode)
  end
  def copy(flags: self.flags, receiver: self.receiver, call_operator_loc: self.call_operator_loc, message_loc: self.message_loc, read_name: self.read_name, write_name: self.write_name, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(String)) }
  def message; end

  sig { returns(T.nilable(Prism::Location)) }
  def message_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(Symbol) }
  def read_name; end

  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  sig { returns(T::Boolean) }
  def safe_navigation?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end

  sig { returns(T::Boolean) }
  def variable_call?; end

  sig { returns(Symbol) }
  def write_name; end
end

# Represents assigning to a method call.
#
#     foo.bar, = 1
#     ^^^^^^^
#
#     begin
#     rescue => foo.bar
#               ^^^^^^^
#     end
#
#     for foo.bar in baz do end
#         ^^^^^^^
class Prism::CallTargetNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: Prism::Node,
      call_operator_loc: Prism::Location,
      name: Symbol,
      message_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, name, message_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Boolean) }
  def attribute_write?; end

  sig { returns(String) }
  def call_operator; end

  sig { returns(Prism::Location) }
  def call_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      receiver: Prism::Node,
      call_operator_loc: Prism::Location,
      name: Symbol,
      message_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::CallTargetNode)
  end
  def copy(flags: self.flags, receiver: self.receiver, call_operator_loc: self.call_operator_loc, name: self.name, message_loc: self.message_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def message; end

  sig { returns(Prism::Location) }
  def message_loc; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Node) }
  def receiver; end

  sig { returns(T::Boolean) }
  def safe_navigation?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(T::Boolean) }
  def variable_call?; end
end

# Represents assigning to a local variable in pattern matching.
#
#     foo => [bar => baz]
#            ^^^^^^^^^^^^
class Prism::CapturePatternNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      value: Prism::Node,
      target: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, value, target, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      value: Prism::Node,
      target: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::CapturePatternNode)
  end
  def copy(value: self.value, target: self.target, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(Prism::Node) }
  def target; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents the use of a case statement for pattern matching.
#
#     case true
#     in false
#     end
#     ^^^^^^^^^
class Prism::CaseMatchNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::Node],
      consequent: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(String) }
  def case_keyword; end

  sig { returns(Prism::Location) }
  def case_keyword_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  sig do
    params(
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::Node],
      consequent: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::CaseMatchNode)
  end
  def copy(predicate: self.predicate, conditions: self.conditions, consequent: self.consequent, case_keyword_loc: self.case_keyword_loc, end_keyword_loc: self.end_keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def end_keyword; end

  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Prism::Node)) }
  def predicate; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of a case statement.
#
#     case true
#     when false
#     end
#     ^^^^^^^^^^
class Prism::CaseNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::Node],
      consequent: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, predicate, conditions, consequent, case_keyword_loc, end_keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(String) }
  def case_keyword; end

  sig { returns(Prism::Location) }
  def case_keyword_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  sig do
    params(
      predicate: T.nilable(Prism::Node),
      conditions: T::Array[Prism::Node],
      consequent: T.nilable(Prism::ElseNode),
      case_keyword_loc: Prism::Location,
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::CaseNode)
  end
  def copy(predicate: self.predicate, conditions: self.conditions, consequent: self.consequent, case_keyword_loc: self.case_keyword_loc, end_keyword_loc: self.end_keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def end_keyword; end

  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Prism::Node)) }
  def predicate; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a class declaration involving the `class` keyword.
#
#     class Foo end
#     ^^^^^^^^^^^^^
class Prism::ClassNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      constant_path: Prism::Node,
      inheritance_operator_loc: T.nilable(Prism::Location),
      superclass: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      name: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, locals, class_keyword_loc, constant_path, inheritance_operator_loc, superclass, body, end_keyword_loc, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def class_keyword; end

  sig { returns(Prism::Location) }
  def class_keyword_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(Prism::Node) }
  def constant_path; end

  sig do
    params(
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      constant_path: Prism::Node,
      inheritance_operator_loc: T.nilable(Prism::Location),
      superclass: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      name: Symbol,
      location: Prism::Location
    ).returns(Prism::ClassNode)
  end
  def copy(locals: self.locals, class_keyword_loc: self.class_keyword_loc, constant_path: self.constant_path, inheritance_operator_loc: self.inheritance_operator_loc, superclass: self.superclass, body: self.body, end_keyword_loc: self.end_keyword_loc, name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def end_keyword; end

  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(T.nilable(String)) }
  def inheritance_operator; end

  sig { returns(T.nilable(Prism::Location)) }
  def inheritance_operator_loc; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Array[Symbol]) }
  def locals; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(T.nilable(Prism::Node)) }
  def superclass; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `&&=` operator for assignment to a class variable.
#
#     @@target &&= value
#     ^^^^^^^^^^^^^^^^^^
class Prism::ClassVariableAndWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ClassVariableAndWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents assigning to a class variable using an operator that isn't `=`.
#
#     @@target += value
#     ^^^^^^^^^^^^^^^^^
class Prism::ClassVariableOperatorWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, binary_operator_loc, value, binary_operator, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(Symbol) }
  def binary_operator; end

  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).returns(Prism::ClassVariableOperatorWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, binary_operator_loc: self.binary_operator_loc, value: self.value, binary_operator: self.binary_operator, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents the use of the `||=` operator for assignment to a class variable.
#
#     @@target ||= value
#     ^^^^^^^^^^^^^^^^^^
class Prism::ClassVariableOrWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ClassVariableOrWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents referencing a class variable.
#
#     @@foo
#     ^^^^^
class Prism::ClassVariableReadNode < Prism::Node
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(name: Symbol, location: Prism::Location).returns(Prism::ClassVariableReadNode) }
  def copy(name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents writing to a class variable in a context that doesn't have an explicit value.
#
#     @@foo, @@bar = baz
#     ^^^^^  ^^^^^
class Prism::ClassVariableTargetNode < Prism::Node
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(name: Symbol, location: Prism::Location).returns(Prism::ClassVariableTargetNode) }
  def copy(name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents writing to a class variable.
#
#     @@foo = 1
#     ^^^^^^^^^
class Prism::ClassVariableWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, value, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::ClassVariableWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, value: self.value, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

class Prism::Comment
  abstract!

  sig { params(location: Prism::Location).void }
  def initialize(location); end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Prism::Location) }
  def location; end

  sig { returns(String) }
  def slice; end

  sig { abstract.returns(T::Boolean) }
  def trailing?; end
end

class Prism::Compiler
  sig { params(node: T.nilable(Prism::Node)).returns(T.untyped) }
  def visit(node); end

  sig { params(nodes: T::Array[T.nilable(Prism::Node)]).returns(T::Array[T.untyped]) }
  def visit_all(nodes); end

  sig { params(node: Prism::Node).returns(T::Array[T.untyped]) }
  def visit_child_nodes(node); end
end

# Represents the use of the `&&=` operator for assignment to a constant.
#
#     Target &&= value
#     ^^^^^^^^^^^^^^^^
class Prism::ConstantAndWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ConstantAndWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents assigning to a constant using an operator that isn't `=`.
#
#     Target += value
#     ^^^^^^^^^^^^^^^
class Prism::ConstantOperatorWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, binary_operator_loc, value, binary_operator, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(Symbol) }
  def binary_operator; end

  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).returns(Prism::ConstantOperatorWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, binary_operator_loc: self.binary_operator_loc, value: self.value, binary_operator: self.binary_operator, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents the use of the `||=` operator for assignment to a constant.
#
#     Target ||= value
#     ^^^^^^^^^^^^^^^^
class Prism::ConstantOrWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ConstantOrWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents the use of the `&&=` operator for assignment to a constant path.
#
#     Parent::Child &&= value
#     ^^^^^^^^^^^^^^^^^^^^^^^
class Prism::ConstantPathAndWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, target, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ConstantPathAndWriteNode)
  end
  def copy(target: self.target, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(Prism::ConstantPathNode) }
  def target; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents accessing a constant through a path of `::` operators.
#
#     Foo::Bar
#     ^^^^^^^^
class Prism::ConstantPathNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, parent, name, delimiter_loc, name_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::ConstantPathNode)
  end
  def copy(parent: self.parent, name: self.name, delimiter_loc: self.delimiter_loc, name_loc: self.name_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def delimiter; end

  sig { returns(Prism::Location) }
  def delimiter_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(String) }
  def full_name; end

  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Symbol)) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def parent; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents assigning to a constant path using an operator that isn't `=`.
#
#     Parent::Child += value
#     ^^^^^^^^^^^^^^^^^^^^^^
class Prism::ConstantPathOperatorWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      target: Prism::ConstantPathNode,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, target, binary_operator_loc, value, binary_operator, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(Symbol) }
  def binary_operator; end

  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      target: Prism::ConstantPathNode,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).returns(Prism::ConstantPathOperatorWriteNode)
  end
  def copy(target: self.target, binary_operator_loc: self.binary_operator_loc, value: self.value, binary_operator: self.binary_operator, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Prism::ConstantPathNode) }
  def target; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents the use of the `||=` operator for assignment to a constant path.
#
#     Parent::Child ||= value
#     ^^^^^^^^^^^^^^^^^^^^^^^
class Prism::ConstantPathOrWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, target, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ConstantPathOrWriteNode)
  end
  def copy(target: self.target, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(Prism::ConstantPathNode) }
  def target; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents writing to a constant path in a context that doesn't have an explicit value.
#
#     Foo::Foo, Bar::Bar = baz
#     ^^^^^^^^  ^^^^^^^^
class Prism::ConstantPathTargetNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, parent, name, delimiter_loc, name_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      parent: T.nilable(Prism::Node),
      name: T.nilable(Symbol),
      delimiter_loc: Prism::Location,
      name_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::ConstantPathTargetNode)
  end
  def copy(parent: self.parent, name: self.name, delimiter_loc: self.delimiter_loc, name_loc: self.name_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def delimiter; end

  sig { returns(Prism::Location) }
  def delimiter_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(String) }
  def full_name; end

  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Symbol)) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def parent; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents writing to a constant path.
#
#     ::Foo = 1
#     ^^^^^^^^^
#
#     Foo::Bar = 1
#     ^^^^^^^^^^^^
#
#     ::Foo::Bar = 1
#     ^^^^^^^^^^^^^^
class Prism::ConstantPathWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, target, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      target: Prism::ConstantPathNode,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::ConstantPathWriteNode)
  end
  def copy(target: self.target, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(Prism::ConstantPathNode) }
  def target; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents referencing a constant.
#
#     Foo
#     ^^^
class Prism::ConstantReadNode < Prism::Node
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(name: Symbol, location: Prism::Location).returns(Prism::ConstantReadNode) }
  def copy(name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(String) }
  def full_name; end

  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents writing to a constant in a context that doesn't have an explicit value.
#
#     Foo, Bar = baz
#     ^^^  ^^^
class Prism::ConstantTargetNode < Prism::Node
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(name: Symbol, location: Prism::Location).returns(Prism::ConstantTargetNode) }
  def copy(name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(String) }
  def full_name; end

  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents writing to a constant.
#
#     Foo = 1
#     ^^^^^^^
class Prism::ConstantWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, value, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::ConstantWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, value: self.value, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(String) }
  def full_name; end

  sig { returns(T::Array[Symbol]) }
  def full_name_parts; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents a method definition.
#
#     def method
#     end
#     ^^^^^^^^^^
class Prism::DefNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      receiver: T.nilable(Prism::Node),
      parameters: T.nilable(Prism::ParametersNode),
      body: T.nilable(Prism::Node),
      locals: T::Array[Symbol],
      def_keyword_loc: Prism::Location,
      operator_loc: T.nilable(Prism::Location),
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      equal_loc: T.nilable(Prism::Location),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, receiver, parameters, body, locals, def_keyword_loc, operator_loc, lparen_loc, rparen_loc, equal_loc, end_keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      receiver: T.nilable(Prism::Node),
      parameters: T.nilable(Prism::ParametersNode),
      body: T.nilable(Prism::Node),
      locals: T::Array[Symbol],
      def_keyword_loc: Prism::Location,
      operator_loc: T.nilable(Prism::Location),
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      equal_loc: T.nilable(Prism::Location),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::DefNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, receiver: self.receiver, parameters: self.parameters, body: self.body, locals: self.locals, def_keyword_loc: self.def_keyword_loc, operator_loc: self.operator_loc, lparen_loc: self.lparen_loc, rparen_loc: self.rparen_loc, equal_loc: self.equal_loc, end_keyword_loc: self.end_keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def def_keyword; end

  sig { returns(Prism::Location) }
  def def_keyword_loc; end

  sig { returns(T.nilable(String)) }
  def end_keyword; end

  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  sig { returns(T.nilable(String)) }
  def equal; end

  sig { returns(T.nilable(Prism::Location)) }
  def equal_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Array[Symbol]) }
  def locals; end

  sig { returns(T.nilable(String)) }
  def lparen; end

  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(T.nilable(String)) }
  def operator; end

  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  sig { returns(T.nilable(Prism::ParametersNode)) }
  def parameters; end

  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  sig { returns(T.nilable(String)) }
  def rparen; end

  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `defined?` keyword.
#
#     defined?(a)
#     ^^^^^^^^^^^
class Prism::DefinedNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      lparen_loc: T.nilable(Prism::Location),
      value: Prism::Node,
      rparen_loc: T.nilable(Prism::Location),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, lparen_loc, value, rparen_loc, keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      lparen_loc: T.nilable(Prism::Location),
      value: Prism::Node,
      rparen_loc: T.nilable(Prism::Location),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::DefinedNode)
  end
  def copy(lparen_loc: self.lparen_loc, value: self.value, rparen_loc: self.rparen_loc, keyword_loc: self.keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(T.nilable(String)) }
  def lparen; end

  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  sig { returns(T.nilable(String)) }
  def rparen; end

  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents an `else` clause in a `case`, `if`, or `unless` statement.
#
#     if a then b else c end
#                 ^^^^^^^^^^
class Prism::ElseNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      else_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, else_keyword_loc, statements, end_keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      else_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::ElseNode)
  end
  def copy(else_keyword_loc: self.else_keyword_loc, statements: self.statements, end_keyword_loc: self.end_keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def else_keyword; end

  sig { returns(Prism::Location) }
  def else_keyword_loc; end

  sig { returns(T.nilable(String)) }
  def end_keyword; end

  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { override.returns(Symbol) }
  def type; end
end

class Prism::EmbDocComment < Prism::Comment
  sig { returns(String) }
  def inspect; end

  sig { override.returns(T::Boolean) }
  def trailing?; end
end

# Represents an interpolated set of statements.
#
#     "foo #{bar}"
#          ^^^^^^
class Prism::EmbeddedStatementsNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      opening_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, opening_loc, statements, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      opening_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::EmbeddedStatementsNode)
  end
  def copy(opening_loc: self.opening_loc, statements: self.statements, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents an interpolated variable.
#
#     "foo #@bar"
#          ^^^^^
class Prism::EmbeddedVariableNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      operator_loc: Prism::Location,
      variable: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, operator_loc, variable, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      operator_loc: Prism::Location,
      variable: Prism::Node,
      location: Prism::Location
    ).returns(Prism::EmbeddedVariableNode)
  end
  def copy(operator_loc: self.operator_loc, variable: self.variable, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def variable; end
end

# Flags for nodes that have unescaped content.
module Prism::EncodingFlags
  # internal bytes forced the encoding to binary
  FORCED_BINARY_ENCODING = T.let(1 << 1, Integer)

  # internal bytes forced the encoding to UTF-8
  FORCED_UTF8_ENCODING = T.let(1 << 0, Integer)
end

# Represents an `ensure` clause in a `begin` statement.
#
#     begin
#       foo
#     ensure
#     ^^^^^^
#       bar
#     end
class Prism::EnsureNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      ensure_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, ensure_keyword_loc, statements, end_keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      ensure_keyword_loc: Prism::Location,
      statements: T.nilable(Prism::StatementsNode),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::EnsureNode)
  end
  def copy(ensure_keyword_loc: self.ensure_keyword_loc, statements: self.statements, end_keyword_loc: self.end_keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def end_keyword; end

  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { returns(String) }
  def ensure_keyword; end

  sig { returns(Prism::Location) }
  def ensure_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the literal `false` keyword.
#
#     false
#     ^^^^^
class Prism::FalseNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::FalseNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a find pattern in pattern matching.
#
#     foo in *bar, baz, *qux
#            ^^^^^^^^^^^^^^^
#
#     foo in [*bar, baz, *qux]
#            ^^^^^^^^^^^^^^^^^
#
#     foo in Foo(*bar, baz, *qux)
#            ^^^^^^^^^^^^^^^^^^^^
class Prism::FindPatternNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      constant: T.nilable(Prism::Node),
      left: Prism::Node,
      requireds: T::Array[Prism::Node],
      right: Prism::Node,
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, constant, left, requireds, right, opening_loc, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T.nilable(String)) }
  def closing; end

  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  sig do
    params(
      constant: T.nilable(Prism::Node),
      left: Prism::Node,
      requireds: T::Array[Prism::Node],
      right: Prism::Node,
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::FindPatternNode)
  end
  def copy(constant: self.constant, left: self.left, requireds: self.requireds, right: self.right, opening_loc: self.opening_loc, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Prism::Node) }
  def left; end

  sig { returns(T.nilable(String)) }
  def opening; end

  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  sig { returns(T::Array[Prism::Node]) }
  def requireds; end

  sig { returns(Prism::Node) }
  def right; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `..` or `...` operators to create flip flops.
#
#     baz if foo .. bar
#            ^^^^^^^^^^
class Prism::FlipFlopNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, left, right, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::FlipFlopNode)
  end
  def copy(flags: self.flags, left: self.left, right: self.right, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Boolean) }
  def exclude_end?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Prism::Node)) }
  def left; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def right; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a floating point number literal.
#
#     1.0
#     ^^^
class Prism::FloatNode < Prism::Node
  sig { params(source: Prism::Source, value: Float, location: Prism::Location).void }
  def initialize(source, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(value: Float, location: Prism::Location).returns(Prism::FloatNode) }
  def copy(value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Float) }
  def value; end
end

# Represents the use of the `for` keyword.
#
#     for i in a end
#     ^^^^^^^^^^^^^^
class Prism::ForNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      index: Prism::Node,
      collection: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      for_keyword_loc: Prism::Location,
      in_keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, index, collection, statements, for_keyword_loc, in_keyword_loc, do_keyword_loc, end_keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(Prism::Node) }
  def collection; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      index: Prism::Node,
      collection: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      for_keyword_loc: Prism::Location,
      in_keyword_loc: Prism::Location,
      do_keyword_loc: T.nilable(Prism::Location),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::ForNode)
  end
  def copy(index: self.index, collection: self.collection, statements: self.statements, for_keyword_loc: self.for_keyword_loc, in_keyword_loc: self.in_keyword_loc, do_keyword_loc: self.do_keyword_loc, end_keyword_loc: self.end_keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T.nilable(String)) }
  def do_keyword; end

  sig { returns(T.nilable(Prism::Location)) }
  def do_keyword_loc; end

  sig { returns(String) }
  def end_keyword; end

  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(String) }
  def for_keyword; end

  sig { returns(Prism::Location) }
  def for_keyword_loc; end

  sig { returns(String) }
  def in_keyword; end

  sig { returns(Prism::Location) }
  def in_keyword_loc; end

  sig { returns(Prism::Node) }
  def index; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents forwarding all arguments to this method to another method.
#
#     def foo(...)
#       bar(...)
#           ^^^
#     end
class Prism::ForwardingArgumentsNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::ForwardingArgumentsNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the forwarding parameter in a method, block, or lambda declaration.
#
#     def foo(...)
#             ^^^
#     end
class Prism::ForwardingParameterNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::ForwardingParameterNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `super` keyword without parentheses or arguments.
#
#     super
#     ^^^^^
class Prism::ForwardingSuperNode < Prism::Node
  sig { params(source: Prism::Source, block: T.nilable(Prism::BlockNode), location: Prism::Location).void }
  def initialize(source, block, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::BlockNode)) }
  def block; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(block: T.nilable(Prism::BlockNode), location: Prism::Location).returns(Prism::ForwardingSuperNode) }
  def copy(block: self.block, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `&&=` operator for assignment to a global variable.
#
#     $target &&= value
#     ^^^^^^^^^^^^^^^^^
class Prism::GlobalVariableAndWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::GlobalVariableAndWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents assigning to a global variable using an operator that isn't `=`.
#
#     $target += value
#     ^^^^^^^^^^^^^^^^
class Prism::GlobalVariableOperatorWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, binary_operator_loc, value, binary_operator, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(Symbol) }
  def binary_operator; end

  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).returns(Prism::GlobalVariableOperatorWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, binary_operator_loc: self.binary_operator_loc, value: self.value, binary_operator: self.binary_operator, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents the use of the `||=` operator for assignment to a global variable.
#
#     $target ||= value
#     ^^^^^^^^^^^^^^^^^
class Prism::GlobalVariableOrWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::GlobalVariableOrWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents referencing a global variable.
#
#     $foo
#     ^^^^
class Prism::GlobalVariableReadNode < Prism::Node
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(name: Symbol, location: Prism::Location).returns(Prism::GlobalVariableReadNode) }
  def copy(name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents writing to a global variable in a context that doesn't have an explicit value.
#
#     $foo, $bar = baz
#     ^^^^  ^^^^
class Prism::GlobalVariableTargetNode < Prism::Node
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(name: Symbol, location: Prism::Location).returns(Prism::GlobalVariableTargetNode) }
  def copy(name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents writing to a global variable.
#
#     $foo = 1
#     ^^^^^^^^
class Prism::GlobalVariableWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, value, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::GlobalVariableWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, value: self.value, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents a hash literal.
#
#     { a => b }
#     ^^^^^^^^^^
class Prism::HashNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      opening_loc: Prism::Location,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, opening_loc, elements, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      opening_loc: Prism::Location,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::HashNode)
  end
  def copy(opening_loc: self.opening_loc, elements: self.elements, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)]) }
  def elements; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a hash pattern in pattern matching.
#
#     foo => { a: 1, b: 2 }
#            ^^^^^^^^^^^^^^
#
#     foo => { a: 1, b: 2, **c }
#            ^^^^^^^^^^^^^^^^^^^
class Prism::HashPatternNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      constant: T.nilable(Prism::Node),
      elements: T::Array[Prism::AssocNode],
      rest: T.nilable(T.any(Prism::AssocSplatNode, Prism::NoKeywordsParameterNode)),
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, constant, elements, rest, opening_loc, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T.nilable(String)) }
  def closing; end

  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(T.nilable(Prism::Node)) }
  def constant; end

  sig do
    params(
      constant: T.nilable(Prism::Node),
      elements: T::Array[Prism::AssocNode],
      rest: T.nilable(T.any(Prism::AssocSplatNode, Prism::NoKeywordsParameterNode)),
      opening_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::HashPatternNode)
  end
  def copy(constant: self.constant, elements: self.elements, rest: self.rest, opening_loc: self.opening_loc, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Array[Prism::AssocNode]) }
  def elements; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(String)) }
  def opening; end

  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  sig { returns(T.nilable(T.any(Prism::AssocSplatNode, Prism::NoKeywordsParameterNode))) }
  def rest; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `if` keyword, either in the block form or the modifier form, or a ternary expression.
#
#     bar if foo
#     ^^^^^^^^^^
#
#     if foo then bar end
#     ^^^^^^^^^^^^^^^^^^^
#
#     foo ? bar : baz
#     ^^^^^^^^^^^^^^^
class Prism::IfNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      if_keyword_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::Node),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, if_keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(T.nilable(Prism::Node)) }
  def consequent; end

  sig do
    params(
      if_keyword_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::Node),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::IfNode)
  end
  def copy(if_keyword_loc: self.if_keyword_loc, predicate: self.predicate, then_keyword_loc: self.then_keyword_loc, statements: self.statements, consequent: self.consequent, end_keyword_loc: self.end_keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T.nilable(String)) }
  def end_keyword; end

  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(T.nilable(String)) }
  def if_keyword; end

  sig { returns(T.nilable(Prism::Location)) }
  def if_keyword_loc; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Prism::Node) }
  def predicate; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { returns(T.nilable(String)) }
  def then_keyword; end

  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents an imaginary number literal.
#
#     1.0i
#     ^^^^
class Prism::ImaginaryNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      numeric: T.any(Prism::FloatNode, Prism::IntegerNode, Prism::RationalNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, numeric, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      numeric: T.any(Prism::FloatNode, Prism::IntegerNode, Prism::RationalNode),
      location: Prism::Location
    ).returns(Prism::ImaginaryNode)
  end
  def copy(numeric: self.numeric, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.any(Prism::FloatNode, Prism::IntegerNode, Prism::RationalNode)) }
  def numeric; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Complex) }
  def value; end
end

# Represents a node that is implicitly being added to the tree but doesn't correspond directly to a node in the source.
#
#     { foo: }
#       ^^^^
#
#     { Foo: }
#       ^^^^
#
#     foo in { bar: }
#              ^^^^
class Prism::ImplicitNode < Prism::Node
  sig { params(source: Prism::Source, value: Prism::Node, location: Prism::Location).void }
  def initialize(source, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(value: Prism::Node, location: Prism::Location).returns(Prism::ImplicitNode) }
  def copy(value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents using a trailing comma to indicate an implicit rest parameter.
#
#     foo { |bar,| }
#               ^
#
#     foo in [bar,]
#                ^
#
#     for foo, in bar do end
#            ^
#
#     foo, = bar
#        ^
class Prism::ImplicitRestNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::ImplicitRestNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `in` keyword in a case statement.
#
#     case a; in b then c end
#             ^^^^^^^^^^^
class Prism::InNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      pattern: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      in_loc: Prism::Location,
      then_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, pattern, statements, in_loc, then_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      pattern: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      in_loc: Prism::Location,
      then_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::InNode)
  end
  def copy(pattern: self.pattern, statements: self.statements, in_loc: self.in_loc, then_loc: self.then_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(String) }
  def in; end

  sig { returns(Prism::Location) }
  def in_loc; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Prism::Node) }
  def pattern; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { returns(T.nilable(String)) }
  def then; end

  sig { returns(T.nilable(Prism::Location)) }
  def then_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `&&=` operator on a call to the `[]` method.
#
#     foo.bar[baz] &&= value
#     ^^^^^^^^^^^^^^^^^^^^^^
class Prism::IndexAndWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  sig { returns(T::Boolean) }
  def attribute_write?; end

  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  sig { returns(T.nilable(String)) }
  def call_operator; end

  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::IndexAndWriteNode)
  end
  def copy(flags: self.flags, receiver: self.receiver, call_operator_loc: self.call_operator_loc, opening_loc: self.opening_loc, arguments: self.arguments, closing_loc: self.closing_loc, block: self.block, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  sig { returns(T::Boolean) }
  def safe_navigation?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end

  sig { returns(T::Boolean) }
  def variable_call?; end
end

# Represents the use of an assignment operator on a call to `[]`.
#
#     foo.bar[baz] += value
#     ^^^^^^^^^^^^^^^^^^^^^
class Prism::IndexOperatorWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, binary_operator, binary_operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  sig { returns(T::Boolean) }
  def attribute_write?; end

  sig { returns(Symbol) }
  def binary_operator; end

  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  sig { returns(T.nilable(String)) }
  def call_operator; end

  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      binary_operator: Symbol,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::IndexOperatorWriteNode)
  end
  def copy(flags: self.flags, receiver: self.receiver, call_operator_loc: self.call_operator_loc, opening_loc: self.opening_loc, arguments: self.arguments, closing_loc: self.closing_loc, block: self.block, binary_operator: self.binary_operator, binary_operator_loc: self.binary_operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  sig { returns(T::Boolean) }
  def safe_navigation?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end

  sig { returns(T::Boolean) }
  def variable_call?; end
end

# Represents the use of the `||=` operator on a call to `[]`.
#
#     foo.bar[baz] ||= value
#     ^^^^^^^^^^^^^^^^^^^^^^
class Prism::IndexOrWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, call_operator_loc, opening_loc, arguments, closing_loc, block, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  sig { returns(T::Boolean) }
  def attribute_write?; end

  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  sig { returns(T.nilable(String)) }
  def call_operator; end

  sig { returns(T.nilable(Prism::Location)) }
  def call_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      receiver: T.nilable(Prism::Node),
      call_operator_loc: T.nilable(Prism::Location),
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::IndexOrWriteNode)
  end
  def copy(flags: self.flags, receiver: self.receiver, call_operator_loc: self.call_operator_loc, opening_loc: self.opening_loc, arguments: self.arguments, closing_loc: self.closing_loc, block: self.block, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def receiver; end

  sig { returns(T::Boolean) }
  def safe_navigation?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end

  sig { returns(T::Boolean) }
  def variable_call?; end
end

# Represents assigning to an index.
#
#     foo[bar], = 1
#     ^^^^^^^^
#
#     begin
#     rescue => foo[bar]
#               ^^^^^^^^
#     end
#
#     for foo[bar] in baz do end
#         ^^^^^^^^
class Prism::IndexTargetNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      receiver: Prism::Node,
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, receiver, opening_loc, arguments, closing_loc, block, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  sig { returns(T::Boolean) }
  def attribute_write?; end

  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      receiver: Prism::Node,
      opening_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      closing_loc: Prism::Location,
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).returns(Prism::IndexTargetNode)
  end
  def copy(flags: self.flags, receiver: self.receiver, opening_loc: self.opening_loc, arguments: self.arguments, closing_loc: self.closing_loc, block: self.block, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def ignore_visibility?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Prism::Node) }
  def receiver; end

  sig { returns(T::Boolean) }
  def safe_navigation?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(T::Boolean) }
  def variable_call?; end
end

class Prism::InlineComment < Prism::Comment
  sig { returns(String) }
  def inspect; end

  sig { override.returns(T::Boolean) }
  def trailing?; end
end

class Prism::InspectVisitor < Prism::Visitor
  sig { params(indent: String).void }
  def initialize(indent = ""); end

  sig { returns(String) }
  def compose; end

  class << self
    sig { params(node: Prism::Node).returns(String) }
    def compose(node); end
  end
end

# Represents the use of the `&&=` operator for assignment to an instance variable.
#
#     @target &&= value
#     ^^^^^^^^^^^^^^^^^
class Prism::InstanceVariableAndWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::InstanceVariableAndWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents assigning to an instance variable using an operator that isn't `=`.
#
#     @target += value
#     ^^^^^^^^^^^^^^^^
class Prism::InstanceVariableOperatorWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, binary_operator_loc, value, binary_operator, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(Symbol) }
  def binary_operator; end

  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      binary_operator: Symbol,
      location: Prism::Location
    ).returns(Prism::InstanceVariableOperatorWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, binary_operator_loc: self.binary_operator_loc, value: self.value, binary_operator: self.binary_operator, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents the use of the `||=` operator for assignment to an instance variable.
#
#     @target ||= value
#     ^^^^^^^^^^^^^^^^^
class Prism::InstanceVariableOrWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::InstanceVariableOrWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents referencing an instance variable.
#
#     @foo
#     ^^^^
class Prism::InstanceVariableReadNode < Prism::Node
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(name: Symbol, location: Prism::Location).returns(Prism::InstanceVariableReadNode) }
  def copy(name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents writing to an instance variable in a context that doesn't have an explicit value.
#
#     @foo, @bar = baz
#     ^^^^  ^^^^
class Prism::InstanceVariableTargetNode < Prism::Node
  sig { params(source: Prism::Source, name: Symbol, location: Prism::Location).void }
  def initialize(source, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(name: Symbol, location: Prism::Location).returns(Prism::InstanceVariableTargetNode) }
  def copy(name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents writing to an instance variable.
#
#     @foo = 1
#     ^^^^^^^^
class Prism::InstanceVariableWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, name_loc, value, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::InstanceVariableWriteNode)
  end
  def copy(name: self.name, name_loc: self.name_loc, value: self.value, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Flags for integer nodes that correspond to the base of the integer.
module Prism::IntegerBaseFlags
  # 0b prefix
  BINARY = T.let(1 << 0, Integer)

  # 0d or no prefix
  DECIMAL = T.let(1 << 1, Integer)

  # 0x prefix
  HEXADECIMAL = T.let(1 << 3, Integer)

  # 0o or 0 prefix
  OCTAL = T.let(1 << 2, Integer)
end

# Represents an integer number literal.
#
#     1
#     ^
class Prism::IntegerNode < Prism::Node
  sig { params(source: Prism::Source, flags: Integer, value: Integer, location: Prism::Location).void }
  def initialize(source, flags, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Boolean) }
  def binary?; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(flags: Integer, value: Integer, location: Prism::Location).returns(Prism::IntegerNode) }
  def copy(flags: self.flags, value: self.value, location: self.location); end

  sig { returns(T::Boolean) }
  def decimal?; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def hexadecimal?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Boolean) }
  def octal?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Integer) }
  def value; end
end

# Represents a regular expression literal that contains interpolation that is being used in the predicate of a conditional to implicitly match against the last line read by an IO object.
#
#     if /foo #{bar} baz/ then end
#        ^^^^^^^^^^^^^^^^
class Prism::InterpolatedMatchLastLineNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, parts, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::InterpolatedMatchLastLineNode)
  end
  def copy(flags: self.flags, opening_loc: self.opening_loc, parts: self.parts, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Boolean) }
  def euc_jp?; end

  sig { returns(T::Boolean) }
  def extended?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  sig { returns(T::Boolean) }
  def ignore_case?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Boolean) }
  def multi_line?; end

  sig { returns(T::Boolean) }
  def once?; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Integer) }
  def options; end

  sig { returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)]) }
  def parts; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(T::Boolean) }
  def utf_8?; end

  sig { returns(T::Boolean) }
  def windows_31j?; end
end

# Represents a regular expression literal that contains interpolation.
#
#     /foo #{bar} baz/
#     ^^^^^^^^^^^^^^^^
class Prism::InterpolatedRegularExpressionNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, parts, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::InterpolatedRegularExpressionNode)
  end
  def copy(flags: self.flags, opening_loc: self.opening_loc, parts: self.parts, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Boolean) }
  def euc_jp?; end

  sig { returns(T::Boolean) }
  def extended?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  sig { returns(T::Boolean) }
  def ignore_case?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Boolean) }
  def multi_line?; end

  sig { returns(T::Boolean) }
  def once?; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Integer) }
  def options; end

  sig { returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)]) }
  def parts; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(T::Boolean) }
  def utf_8?; end

  sig { returns(T::Boolean) }
  def windows_31j?; end
end

# Represents a string literal that contains interpolation.
#
#     "foo #{bar} baz"
#     ^^^^^^^^^^^^^^^^
class Prism::InterpolatedStringNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode, Prism::InterpolatedStringNode)],
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, parts, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T.nilable(String)) }
  def closing; end

  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode, Prism::InterpolatedStringNode)],
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::InterpolatedStringNode)
  end
  def copy(flags: self.flags, opening_loc: self.opening_loc, parts: self.parts, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def frozen?; end

  sig { returns(T::Boolean) }
  def heredoc?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Boolean) }
  def mutable?; end

  sig { returns(T.nilable(String)) }
  def opening; end

  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  sig do
    returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode, Prism::InterpolatedStringNode)])
  end
  def parts; end

  sig { override.returns(Symbol) }
  def type; end
end

# Flags for interpolated string nodes that indicated mutability if they are also marked as literals.
module Prism::InterpolatedStringNodeFlags
  # frozen by virtue of a `frozen_string_literal: true` comment or `--enable-frozen-string-literal`; only for adjacent string literals like `'a' 'b'`
  FROZEN = T.let(1 << 0, Integer)

  # mutable by virtue of a `frozen_string_literal: false` comment or `--disable-frozen-string-literal`; only for adjacent string literals like `'a' 'b'`
  MUTABLE = T.let(1 << 1, Integer)
end

# Represents a symbol literal that contains interpolation.
#
#     :"foo #{bar} baz"
#     ^^^^^^^^^^^^^^^^^
class Prism::InterpolatedSymbolNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, opening_loc, parts, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T.nilable(String)) }
  def closing; end

  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      opening_loc: T.nilable(Prism::Location),
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::InterpolatedSymbolNode)
  end
  def copy(opening_loc: self.opening_loc, parts: self.parts, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(String)) }
  def opening; end

  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  sig { returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)]) }
  def parts; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents an xstring literal that contains interpolation.
#
#     `foo #{bar} baz`
#     ^^^^^^^^^^^^^^^^
class Prism::InterpolatedXStringNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, opening_loc, parts, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      opening_loc: Prism::Location,
      parts: T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)],
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::InterpolatedXStringNode)
  end
  def copy(opening_loc: self.opening_loc, parts: self.parts, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(T::Boolean) }
  def heredoc?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(T::Array[T.any(Prism::StringNode, Prism::EmbeddedStatementsNode, Prism::EmbeddedVariableNode)]) }
  def parts; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents reading from the implicit `it` local variable.
#
#     -> { it }
#          ^^
class Prism::ItLocalVariableReadNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::ItLocalVariableReadNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents an implicit set of parameters through the use of the `it` keyword within a block or lambda.
#
#     -> { it + it }
#     ^^^^^^^^^^^^^^
class Prism::ItParametersNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::ItParametersNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a hash literal without opening and closing braces.
#
#     foo(a: b)
#         ^^^^
class Prism::KeywordHashNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)],
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, elements, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      elements: T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)],
      location: Prism::Location
    ).returns(Prism::KeywordHashNode)
  end
  def copy(flags: self.flags, elements: self.elements, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Array[T.any(Prism::AssocNode, Prism::AssocSplatNode)]) }
  def elements; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Boolean) }
  def symbol_keys?; end

  sig { override.returns(Symbol) }
  def type; end
end

# Flags for keyword hash nodes.
module Prism::KeywordHashNodeFlags
  # a keyword hash which only has `AssocNode` elements all with symbol keys, which means the elements can be treated as keyword arguments
  SYMBOL_KEYS = T.let(1 << 0, Integer)
end

# Represents a keyword rest parameter to a method, block, or lambda definition.
#
#     def a(**b)
#           ^^^
#     end
class Prism::KeywordRestParameterNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, name, name_loc, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::KeywordRestParameterNode)
  end
  def copy(flags: self.flags, name: self.name, name_loc: self.name_loc, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Symbol)) }
  def name; end

  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents using a lambda literal (not the lambda method call).
#
#     ->(value) { value * 2 }
#     ^^^^^^^^^^^^^^^^^^^^^^^
class Prism::LambdaNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      locals: T::Array[Symbol],
      operator_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      parameters: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(source, locals, operator_loc, opening_loc, closing_loc, parameters, body, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      locals: T::Array[Symbol],
      operator_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      parameters: T.nilable(Prism::Node),
      body: T.nilable(Prism::Node),
      location: Prism::Location
    ).returns(Prism::LambdaNode)
  end
  def copy(locals: self.locals, operator_loc: self.operator_loc, opening_loc: self.opening_loc, closing_loc: self.closing_loc, parameters: self.parameters, body: self.body, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Array[Symbol]) }
  def locals; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def parameters; end

  sig { override.returns(Symbol) }
  def type; end
end

class Prism::LexResult < Prism::Result
  sig do
    params(
      value: T::Array[T.untyped],
      comments: T::Array[Prism::Comment],
      magic_comments: T::Array[Prism::MagicComment],
      data_loc: T.nilable(Prism::Location),
      errors: T::Array[Prism::ParseError],
      warnings: T::Array[Prism::ParseWarning],
      source: Prism::Source
    ).void
  end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Array[T.untyped]) }
  def value; end
end

# Represents the use of the `&&=` operator for assignment to a local variable.
#
#     target &&= value
#     ^^^^^^^^^^^^^^^^
class Prism::LocalVariableAndWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(source, name_loc, operator_loc, value, name, depth, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer,
      location: Prism::Location
    ).returns(Prism::LocalVariableAndWriteNode)
  end
  def copy(name_loc: self.name_loc, operator_loc: self.operator_loc, value: self.value, name: self.name, depth: self.depth, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Integer) }
  def depth; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents assigning to a local variable using an operator that isn't `=`.
#
#     target += value
#     ^^^^^^^^^^^^^^^
class Prism::LocalVariableOperatorWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      binary_operator: Symbol,
      depth: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(source, name_loc, binary_operator_loc, value, name, binary_operator, depth, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(Symbol) }
  def binary_operator; end

  sig { returns(Prism::Location) }
  def binary_operator_loc; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name_loc: Prism::Location,
      binary_operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      binary_operator: Symbol,
      depth: Integer,
      location: Prism::Location
    ).returns(Prism::LocalVariableOperatorWriteNode)
  end
  def copy(name_loc: self.name_loc, binary_operator_loc: self.binary_operator_loc, value: self.value, name: self.name, binary_operator: self.binary_operator, depth: self.depth, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Integer) }
  def depth; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents the use of the `||=` operator for assignment to a local variable.
#
#     target ||= value
#     ^^^^^^^^^^^^^^^^
class Prism::LocalVariableOrWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(source, name_loc, operator_loc, value, name, depth, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      name: Symbol,
      depth: Integer,
      location: Prism::Location
    ).returns(Prism::LocalVariableOrWriteNode)
  end
  def copy(name_loc: self.name_loc, operator_loc: self.operator_loc, value: self.value, name: self.name, depth: self.depth, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Integer) }
  def depth; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents reading a local variable. Note that this requires that a local variable of the same name has already been written to in the same scope, otherwise it is parsed as a method call.
#
#     foo
#     ^^^
class Prism::LocalVariableReadNode < Prism::Node
  sig { params(source: Prism::Source, name: Symbol, depth: Integer, location: Prism::Location).void }
  def initialize(source, name, depth, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(name: Symbol, depth: Integer, location: Prism::Location).returns(Prism::LocalVariableReadNode) }
  def copy(name: self.name, depth: self.depth, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Integer) }
  def depth; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents writing to a local variable in a context that doesn't have an explicit value.
#
#     foo, bar = baz
#     ^^^  ^^^
class Prism::LocalVariableTargetNode < Prism::Node
  sig { params(source: Prism::Source, name: Symbol, depth: Integer, location: Prism::Location).void }
  def initialize(source, name, depth, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(name: Symbol, depth: Integer, location: Prism::Location).returns(Prism::LocalVariableTargetNode) }
  def copy(name: self.name, depth: self.depth, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Integer) }
  def depth; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents writing to a local variable.
#
#     foo = 1
#     ^^^^^^^
class Prism::LocalVariableWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      name: Symbol,
      depth: Integer,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, name, depth, name_loc, value, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      name: Symbol,
      depth: Integer,
      name_loc: Prism::Location,
      value: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::LocalVariableWriteNode)
  end
  def copy(name: self.name, depth: self.depth, name_loc: self.name_loc, value: self.value, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Integer) }
  def depth; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

class Prism::Location
  sig { params(source: Prism::Source, start_offset: Integer, length: Integer).void }
  def initialize(source, start_offset, length); end

  sig { params(other: T.untyped).returns(T::Boolean) }
  def ==(other); end

  sig { params(string: String).returns(Prism::Location) }
  def adjoin(string); end

  sig { returns(Prism::Location) }
  def chop; end

  sig { returns(T::Array[Prism::Comment]) }
  def comments; end

  sig { params(source: Prism::Source, start_offset: Integer, length: Integer).returns(Prism::Location) }
  def copy(source: self.source, start_offset: self.start_offset, length: self.length); end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Integer) }
  def end_character_column; end

  sig { returns(Integer) }
  def end_character_offset; end

  sig { params(encoding: Encoding).returns(Integer) }
  def end_code_units_column(encoding = Encoding::UTF_16LE); end

  sig { params(encoding: Encoding).returns(Integer) }
  def end_code_units_offset(encoding = Encoding::UTF_16LE); end

  sig { returns(Integer) }
  def end_column; end

  sig { returns(Integer) }
  def end_line; end

  sig { returns(Integer) }
  def end_offset; end

  sig { returns(String) }
  def inspect; end

  sig { params(other: Prism::Location).returns(Prism::Location) }
  def join(other); end

  sig { params(comment: Prism::Comment).void }
  def leading_comment(comment); end

  sig { returns(T::Array[Prism::Comment]) }
  def leading_comments; end

  sig { returns(Integer) }
  def length; end

  sig { params(q: T.untyped).void }
  def pretty_print(q); end

  sig { returns(String) }
  def slice; end

  sig { returns(Prism::Source) }
  def source; end

  sig { returns(T::Array[String]) }
  def source_lines; end

  sig { returns(Integer) }
  def start_character_column; end

  sig { returns(Integer) }
  def start_character_offset; end

  sig { params(encoding: Encoding).returns(Integer) }
  def start_code_units_column(encoding = Encoding::UTF_16LE); end

  sig { params(encoding: Encoding).returns(Integer) }
  def start_code_units_offset(encoding = Encoding::UTF_16LE); end

  sig { returns(Integer) }
  def start_column; end

  sig { returns(Integer) }
  def start_line; end

  sig { returns(String) }
  def start_line_slice; end

  sig { returns(Integer) }
  def start_offset; end

  sig { params(comment: Prism::Comment).void }
  def trailing_comment(comment); end

  sig { returns(T::Array[Prism::Comment]) }
  def trailing_comments; end
end

# Flags for while and until loop nodes.
module Prism::LoopFlags
  # a loop after a begin statement, so the body is executed first before the condition
  BEGIN_MODIFIER = T.let(1 << 0, Integer)
end

class Prism::MagicComment
  sig { params(key_loc: Prism::Location, value_loc: Prism::Location).void }
  def initialize(key_loc, value_loc); end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def inspect; end

  sig { returns(String) }
  def key; end

  sig { returns(Prism::Location) }
  def key_loc; end

  sig { returns(String) }
  def value; end

  sig { returns(Prism::Location) }
  def value_loc; end
end

# Represents a regular expression literal used in the predicate of a conditional to implicitly match against the last line read by an IO object.
#
#     if /foo/i then end
#        ^^^^^^
class Prism::MatchLastLineNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(String) }
  def content; end

  sig { returns(Prism::Location) }
  def content_loc; end

  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).returns(Prism::MatchLastLineNode)
  end
  def copy(flags: self.flags, opening_loc: self.opening_loc, content_loc: self.content_loc, closing_loc: self.closing_loc, unescaped: self.unescaped, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Boolean) }
  def euc_jp?; end

  sig { returns(T::Boolean) }
  def extended?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  sig { returns(T::Boolean) }
  def ignore_case?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Boolean) }
  def multi_line?; end

  sig { returns(T::Boolean) }
  def once?; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Integer) }
  def options; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(String) }
  def unescaped; end

  sig { returns(T::Boolean) }
  def utf_8?; end

  sig { returns(T::Boolean) }
  def windows_31j?; end
end

# Represents the use of the modifier `in` operator.
#
#     foo in bar
#     ^^^^^^^^^^
class Prism::MatchPredicateNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, value, pattern, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::MatchPredicateNode)
  end
  def copy(value: self.value, pattern: self.pattern, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(Prism::Node) }
  def pattern; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents the use of the `=>` operator.
#
#     foo => bar
#     ^^^^^^^^^^
class Prism::MatchRequiredNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, value, pattern, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      value: Prism::Node,
      pattern: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::MatchRequiredNode)
  end
  def copy(value: self.value, pattern: self.pattern, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(Prism::Node) }
  def pattern; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents writing local variables using a regular expression match with named capture groups.
#
#     /(?<foo>bar)/ =~ baz
#     ^^^^^^^^^^^^^^^^^^^^
class Prism::MatchWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      call: Prism::CallNode,
      targets: T::Array[Prism::LocalVariableTargetNode],
      location: Prism::Location
    ).void
  end
  def initialize(source, call, targets, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(Prism::CallNode) }
  def call; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      call: Prism::CallNode,
      targets: T::Array[Prism::LocalVariableTargetNode],
      location: Prism::Location
    ).returns(Prism::MatchWriteNode)
  end
  def copy(call: self.call, targets: self.targets, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Array[Prism::LocalVariableTargetNode]) }
  def targets; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a node that is missing from the source and results in a syntax error.
class Prism::MissingNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::MissingNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a module declaration involving the `module` keyword.
#
#     module Foo end
#     ^^^^^^^^^^^^^^
class Prism::ModuleNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      locals: T::Array[Symbol],
      module_keyword_loc: Prism::Location,
      constant_path: Prism::Node,
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      name: Symbol,
      location: Prism::Location
    ).void
  end
  def initialize(source, locals, module_keyword_loc, constant_path, body, end_keyword_loc, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(Prism::Node) }
  def constant_path; end

  sig do
    params(
      locals: T::Array[Symbol],
      module_keyword_loc: Prism::Location,
      constant_path: Prism::Node,
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      name: Symbol,
      location: Prism::Location
    ).returns(Prism::ModuleNode)
  end
  def copy(locals: self.locals, module_keyword_loc: self.module_keyword_loc, constant_path: self.constant_path, body: self.body, end_keyword_loc: self.end_keyword_loc, name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def end_keyword; end

  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Array[Symbol]) }
  def locals; end

  sig { returns(String) }
  def module_keyword; end

  sig { returns(Prism::Location) }
  def module_keyword_loc; end

  sig { returns(Symbol) }
  def name; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a multi-target expression.
#
#     a, (b, c) = 1, 2, 3
#        ^^^^^^
class Prism::MultiTargetNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      rest: T.nilable(Prism::Node),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, lefts, rest, rights, lparen_loc, rparen_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)],
      rest: T.nilable(Prism::Node),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::MultiTargetNode)
  end
  def copy(lefts: self.lefts, rest: self.rest, rights: self.rights, lparen_loc: self.lparen_loc, rparen_loc: self.rparen_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig do
    returns(T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode, Prism::NumberedReferenceReadNode)])
  end
  def lefts; end

  sig { returns(T.nilable(String)) }
  def lparen; end

  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  sig do
    returns(T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode, Prism::RequiredParameterNode, Prism::BackReferenceReadNode)])
  end
  def rights; end

  sig { returns(T.nilable(String)) }
  def rparen; end

  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a write to a multi-target expression.
#
#     a, b, c = 1, 2, 3
#     ^^^^^^^^^^^^^^^^^
class Prism::MultiWriteNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode)],
      rest: T.nilable(Prism::Node),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, lefts, rest, rights, lparen_loc, rparen_loc, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      lefts: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode)],
      rest: T.nilable(Prism::Node),
      rights: T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode)],
      lparen_loc: T.nilable(Prism::Location),
      rparen_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::MultiWriteNode)
  end
  def copy(lefts: self.lefts, rest: self.rest, rights: self.rights, lparen_loc: self.lparen_loc, rparen_loc: self.rparen_loc, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig do
    returns(T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode)])
  end
  def lefts; end

  sig { returns(T.nilable(String)) }
  def lparen; end

  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def rest; end

  sig do
    returns(T::Array[T.any(Prism::LocalVariableTargetNode, Prism::InstanceVariableTargetNode, Prism::ClassVariableTargetNode, Prism::GlobalVariableTargetNode, Prism::ConstantTargetNode, Prism::ConstantPathTargetNode, Prism::CallTargetNode, Prism::IndexTargetNode, Prism::MultiTargetNode)])
  end
  def rights; end

  sig { returns(T.nilable(String)) }
  def rparen; end

  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents the use of the `next` keyword.
#
#     next 1
#     ^^^^^^
class Prism::NextNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, arguments, keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      arguments: T.nilable(Prism::ArgumentsNode),
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::NextNode)
  end
  def copy(arguments: self.arguments, keyword_loc: self.keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `nil` keyword.
#
#     nil
#     ^^^
class Prism::NilNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::NilNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of `**nil` inside method arguments.
#
#     def a(**nil)
#           ^^^^^
#     end
class Prism::NoKeywordsParameterNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      operator_loc: Prism::Location,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, operator_loc, keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      operator_loc: Prism::Location,
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::NoKeywordsParameterNode)
  end
  def copy(operator_loc: self.operator_loc, keyword_loc: self.keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

class Prism::Node
  abstract!

  sig { abstract.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { abstract.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { abstract.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { abstract.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { abstract.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { returns(Integer) }
  def end_offset; end

  sig { abstract.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { abstract.returns(String) }
  def inspect; end

  sig { returns(Prism::Location) }
  def location; end

  sig { params(q: T.untyped).void }
  def pretty_print(q); end

  sig { returns(T::Array[String]) }
  def script_lines; end

  sig { returns(String) }
  def slice; end

  sig { returns(String) }
  def slice_lines; end

  sig { returns(Prism::Source) }
  def source; end

  sig { returns(T::Array[String]) }
  def source_lines; end

  sig { returns(Integer) }
  def start_offset; end

  sig { returns(String) }
  def to_dot; end

  sig { params(line: Integer, column: Integer).returns(T::Array[Prism::Node]) }
  def tunnel(line, column); end

  sig { abstract.returns(Symbol) }
  def type; end
end

# Represents an implicit set of parameters through the use of numbered parameters within a block or lambda.
#
#     -> { _1 + _2 }
#     ^^^^^^^^^^^^^^
class Prism::NumberedParametersNode < Prism::Node
  sig { params(source: Prism::Source, maximum: Integer, location: Prism::Location).void }
  def initialize(source, maximum, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(maximum: Integer, location: Prism::Location).returns(Prism::NumberedParametersNode) }
  def copy(maximum: self.maximum, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Integer) }
  def maximum; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents reading a numbered reference to a capture in the previous match.
#
#     $1
#     ^^
class Prism::NumberedReferenceReadNode < Prism::Node
  sig { params(source: Prism::Source, number: Integer, location: Prism::Location).void }
  def initialize(source, number, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(number: Integer, location: Prism::Location).returns(Prism::NumberedReferenceReadNode) }
  def copy(number: self.number, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Integer) }
  def number; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents an optional keyword parameter to a method, block, or lambda definition.
#
#     def a(b: 1)
#           ^^^^
#     end
class Prism::OptionalKeywordParameterNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, name, name_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::OptionalKeywordParameterNode)
  end
  def copy(flags: self.flags, name: self.name, name_loc: self.name_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents an optional parameter to a method, block, or lambda definition.
#
#     def a(b = 1)
#           ^^^^^
#     end
class Prism::OptionalParameterNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, name, name_loc, operator_loc, value, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      operator_loc: Prism::Location,
      value: Prism::Node,
      location: Prism::Location
    ).returns(Prism::OptionalParameterNode)
  end
  def copy(flags: self.flags, name: self.name, name_loc: self.name_loc, operator_loc: self.operator_loc, value: self.value, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def value; end
end

# Represents the use of the `||` operator or the `or` keyword.
#
#     left or right
#     ^^^^^^^^^^^^^
class Prism::OrNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, left, right, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      left: Prism::Node,
      right: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::OrNode)
  end
  def copy(left: self.left, right: self.right, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Prism::Node) }
  def left; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(Prism::Node) }
  def right; end

  sig { override.returns(Symbol) }
  def type; end
end

# Flags for parameter nodes.
module Prism::ParameterFlags
  # a parameter name that has been repeated in the method signature
  REPEATED_PARAMETER = T.let(1 << 0, Integer)
end

# Represents the list of parameters on a method, block, or lambda definition.
#
#     def a(b, c, d)
#           ^^^^^^^
#     end
class Prism::ParametersNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      requireds: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode)],
      optionals: T::Array[Prism::OptionalParameterNode],
      rest: T.nilable(T.any(Prism::RestParameterNode, Prism::ImplicitRestNode)),
      posts: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode, Prism::KeywordRestParameterNode, Prism::NoKeywordsParameterNode, Prism::ForwardingParameterNode)],
      keywords: T::Array[T.any(Prism::RequiredKeywordParameterNode, Prism::OptionalKeywordParameterNode)],
      keyword_rest: T.nilable(T.any(Prism::KeywordRestParameterNode, Prism::ForwardingParameterNode, Prism::NoKeywordsParameterNode)),
      block: T.nilable(Prism::BlockParameterNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, requireds, optionals, rest, posts, keywords, keyword_rest, block, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::BlockParameterNode)) }
  def block; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      requireds: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode)],
      optionals: T::Array[Prism::OptionalParameterNode],
      rest: T.nilable(T.any(Prism::RestParameterNode, Prism::ImplicitRestNode)),
      posts: T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode, Prism::KeywordRestParameterNode, Prism::NoKeywordsParameterNode, Prism::ForwardingParameterNode)],
      keywords: T::Array[T.any(Prism::RequiredKeywordParameterNode, Prism::OptionalKeywordParameterNode)],
      keyword_rest: T.nilable(T.any(Prism::KeywordRestParameterNode, Prism::ForwardingParameterNode, Prism::NoKeywordsParameterNode)),
      block: T.nilable(Prism::BlockParameterNode),
      location: Prism::Location
    ).returns(Prism::ParametersNode)
  end
  def copy(requireds: self.requireds, optionals: self.optionals, rest: self.rest, posts: self.posts, keywords: self.keywords, keyword_rest: self.keyword_rest, block: self.block, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig do
    returns(T.nilable(T.any(Prism::KeywordRestParameterNode, Prism::ForwardingParameterNode, Prism::NoKeywordsParameterNode)))
  end
  def keyword_rest; end

  sig { returns(T::Array[T.any(Prism::RequiredKeywordParameterNode, Prism::OptionalKeywordParameterNode)]) }
  def keywords; end

  sig { returns(T::Array[Prism::OptionalParameterNode]) }
  def optionals; end

  sig do
    returns(T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode, Prism::KeywordRestParameterNode, Prism::NoKeywordsParameterNode, Prism::ForwardingParameterNode)])
  end
  def posts; end

  sig { returns(T::Array[T.any(Prism::RequiredParameterNode, Prism::MultiTargetNode)]) }
  def requireds; end

  sig { returns(T.nilable(T.any(Prism::RestParameterNode, Prism::ImplicitRestNode))) }
  def rest; end

  sig { returns(T::Array[T.any([Symbol, Symbol], [Symbol])]) }
  def signature; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a parenthesized expression
#
#     (10 + 34)
#     ^^^^^^^^^
class Prism::ParenthesesNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, body, opening_loc, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      body: T.nilable(Prism::Node),
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::ParenthesesNode)
  end
  def copy(body: self.body, opening_loc: self.opening_loc, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

class Prism::ParseError
  sig { params(type: Symbol, message: String, location: Prism::Location, level: Symbol).void }
  def initialize(type, message, location, level); end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def level; end

  sig { returns(Prism::Location) }
  def location; end

  sig { returns(String) }
  def message; end

  sig { returns(Symbol) }
  def type; end
end

class Prism::ParseLexResult < Prism::Result
  sig do
    params(
      value: [Prism::ProgramNode, T::Array[T.untyped]],
      comments: T::Array[Prism::Comment],
      magic_comments: T::Array[Prism::MagicComment],
      data_loc: T.nilable(Prism::Location),
      errors: T::Array[Prism::ParseError],
      warnings: T::Array[Prism::ParseWarning],
      source: Prism::Source
    ).void
  end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns([Prism::ProgramNode, T::Array[T.untyped]]) }
  def value; end
end

class Prism::ParseResult < Prism::Result
  sig do
    params(
      value: Prism::ProgramNode,
      comments: T::Array[Prism::Comment],
      magic_comments: T::Array[Prism::MagicComment],
      data_loc: T.nilable(Prism::Location),
      errors: T::Array[Prism::ParseError],
      warnings: T::Array[Prism::ParseWarning],
      source: Prism::Source
    ).void
  end
  def initialize(value, comments, magic_comments, data_loc, errors, warnings, source); end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Prism::ProgramNode) }
  def value; end
end

class Prism::ParseWarning
  sig { params(type: Symbol, message: String, location: Prism::Location, level: Symbol).void }
  def initialize(type, message, location, level); end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def level; end

  sig { returns(Prism::Location) }
  def location; end

  sig { returns(String) }
  def message; end

  sig { returns(Symbol) }
  def type; end
end

# Represents the use of the `^` operator for pinning an expression in a pattern matching expression.
#
#     foo in ^(bar)
#            ^^^^^^
class Prism::PinnedExpressionNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      expression: Prism::Node,
      operator_loc: Prism::Location,
      lparen_loc: Prism::Location,
      rparen_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, expression, operator_loc, lparen_loc, rparen_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      expression: Prism::Node,
      operator_loc: Prism::Location,
      lparen_loc: Prism::Location,
      rparen_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::PinnedExpressionNode)
  end
  def copy(expression: self.expression, operator_loc: self.operator_loc, lparen_loc: self.lparen_loc, rparen_loc: self.rparen_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Prism::Node) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def lparen; end

  sig { returns(Prism::Location) }
  def lparen_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(String) }
  def rparen; end

  sig { returns(Prism::Location) }
  def rparen_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `^` operator for pinning a variable in a pattern matching expression.
#
#     foo in ^bar
#            ^^^^
class Prism::PinnedVariableNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      variable: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, variable, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      variable: Prism::Node,
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::PinnedVariableNode)
  end
  def copy(variable: self.variable, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Prism::Node) }
  def variable; end
end

# Represents the use of the `END` keyword.
#
#     END { foo }
#     ^^^^^^^^^^^
class Prism::PostExecutionNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, statements, keyword_loc, opening_loc, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::PostExecutionNode)
  end
  def copy(statements: self.statements, keyword_loc: self.keyword_loc, opening_loc: self.opening_loc, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `BEGIN` keyword.
#
#     BEGIN { foo }
#     ^^^^^^^^^^^^^
class Prism::PreExecutionNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, statements, keyword_loc, opening_loc, closing_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      statements: T.nilable(Prism::StatementsNode),
      keyword_loc: Prism::Location,
      opening_loc: Prism::Location,
      closing_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::PreExecutionNode)
  end
  def copy(statements: self.statements, keyword_loc: self.keyword_loc, opening_loc: self.opening_loc, closing_loc: self.closing_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { override.returns(Symbol) }
  def type; end
end

# The top level node of any parse tree.
class Prism::ProgramNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      locals: T::Array[Symbol],
      statements: Prism::StatementsNode,
      location: Prism::Location
    ).void
  end
  def initialize(source, locals, statements, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      locals: T::Array[Symbol],
      statements: Prism::StatementsNode,
      location: Prism::Location
    ).returns(Prism::ProgramNode)
  end
  def copy(locals: self.locals, statements: self.statements, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Array[Symbol]) }
  def locals; end

  sig { returns(Prism::StatementsNode) }
  def statements; end

  sig { override.returns(Symbol) }
  def type; end
end

# Flags for range and flip-flop nodes.
module Prism::RangeFlags
  # ... operator
  EXCLUDE_END = T.let(1 << 0, Integer)
end

# Represents the use of the `..` or `...` operators.
#
#     1..2
#     ^^^^
#
#     c if a =~ /left/ ... b =~ /right/
#          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
class Prism::RangeNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, left, right, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      left: T.nilable(Prism::Node),
      right: T.nilable(Prism::Node),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::RangeNode)
  end
  def copy(flags: self.flags, left: self.left, right: self.right, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Boolean) }
  def exclude_end?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Prism::Node)) }
  def left; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def right; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a rational number literal.
#
#     1.0r
#     ^^^^
class Prism::RationalNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      numerator: Integer,
      denominator: Integer,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, numerator, denominator, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Boolean) }
  def binary?; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      numerator: Integer,
      denominator: Integer,
      location: Prism::Location
    ).returns(Prism::RationalNode)
  end
  def copy(flags: self.flags, numerator: self.numerator, denominator: self.denominator, location: self.location); end

  sig { returns(T::Boolean) }
  def decimal?; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Integer) }
  def denominator; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def hexadecimal?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Integer) }
  def numerator; end

  sig { returns(T::Boolean) }
  def octal?; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(Rational) }
  def value; end
end

# Represents the use of the `redo` keyword.
#
#     redo
#     ^^^^
class Prism::RedoNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::RedoNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

module Prism::Reflection; end

module Prism::Reflection
  class << self
    sig { params(node: T.class_of(Prism::Node)).returns(T::Array[Prism::Reflection::Field]) }
    def fields_for(node); end
  end
end

class Prism::Reflection::ConstantField < Prism::Reflection::Field; end
class Prism::Reflection::ConstantListField < Prism::Reflection::Field; end

class Prism::Reflection::Field
  sig { params(name: Symbol).void }
  def initialize(name); end

  sig { returns(Symbol) }
  def name; end
end

class Prism::Reflection::FlagsField < Prism::Reflection::Field
  sig { params(name: Symbol, flags: T::Array[Symbol]).void }
  def initialize(name, flags); end

  sig { returns(T::Array[Symbol]) }
  def flags; end
end

class Prism::Reflection::FloatField < Prism::Reflection::Field; end
class Prism::Reflection::IntegerField < Prism::Reflection::Field; end
class Prism::Reflection::LocationField < Prism::Reflection::Field; end
class Prism::Reflection::NodeField < Prism::Reflection::Field; end
class Prism::Reflection::NodeListField < Prism::Reflection::Field; end
class Prism::Reflection::OptionalConstantField < Prism::Reflection::Field; end
class Prism::Reflection::OptionalLocationField < Prism::Reflection::Field; end
class Prism::Reflection::OptionalNodeField < Prism::Reflection::Field; end
class Prism::Reflection::StringField < Prism::Reflection::Field; end

# Flags for regular expression and match last line nodes.
module Prism::RegularExpressionFlags
  # n - forces the ASCII-8BIT encoding
  ASCII_8BIT = T.let(1 << 5, Integer)

  # e - forces the EUC-JP encoding
  EUC_JP = T.let(1 << 4, Integer)

  # x - ignores whitespace and allows comments in regular expressions
  EXTENDED = T.let(1 << 1, Integer)

  # internal bytes forced the encoding to binary
  FORCED_BINARY_ENCODING = T.let(1 << 9, Integer)

  # internal bytes forced the encoding to US-ASCII
  FORCED_US_ASCII_ENCODING = T.let(1 << 10, Integer)

  # internal bytes forced the encoding to UTF-8
  FORCED_UTF8_ENCODING = T.let(1 << 8, Integer)

  # i - ignores the case of characters when matching
  IGNORE_CASE = T.let(1 << 0, Integer)

  # m - allows $ to match the end of lines within strings
  MULTI_LINE = T.let(1 << 2, Integer)

  # o - only interpolates values into the regular expression once
  ONCE = T.let(1 << 3, Integer)

  # u - forces the UTF-8 encoding
  UTF_8 = T.let(1 << 7, Integer)

  # s - forces the Windows-31J encoding
  WINDOWS_31J = T.let(1 << 6, Integer)
end

# Represents a regular expression literal with no interpolation.
#
#     /foo/i
#     ^^^^^^
class Prism::RegularExpressionNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Boolean) }
  def ascii_8bit?; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(String) }
  def content; end

  sig { returns(Prism::Location) }
  def content_loc; end

  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).returns(Prism::RegularExpressionNode)
  end
  def copy(flags: self.flags, opening_loc: self.opening_loc, content_loc: self.content_loc, closing_loc: self.closing_loc, unescaped: self.unescaped, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Boolean) }
  def euc_jp?; end

  sig { returns(T::Boolean) }
  def extended?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  sig { returns(T::Boolean) }
  def ignore_case?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Boolean) }
  def multi_line?; end

  sig { returns(T::Boolean) }
  def once?; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Integer) }
  def options; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(String) }
  def unescaped; end

  sig { returns(T::Boolean) }
  def utf_8?; end

  sig { returns(T::Boolean) }
  def windows_31j?; end
end

# Represents a required keyword parameter to a method, block, or lambda definition.
#
#     def a(b: )
#           ^^
#     end
class Prism::RequiredKeywordParameterNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, name, name_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      name: Symbol,
      name_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::RequiredKeywordParameterNode)
  end
  def copy(flags: self.flags, name: self.name, name_loc: self.name_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(Prism::Location) }
  def name_loc; end

  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a required parameter to a method, block, or lambda definition.
#
#     def a(b)
#           ^
#     end
class Prism::RequiredParameterNode < Prism::Node
  sig { params(source: Prism::Source, flags: Integer, name: Symbol, location: Prism::Location).void }
  def initialize(source, flags, name, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(flags: Integer, name: Symbol, location: Prism::Location).returns(Prism::RequiredParameterNode) }
  def copy(flags: self.flags, name: self.name, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(Symbol) }
  def name; end

  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents an expression modified with a rescue.
#
#     foo rescue nil
#     ^^^^^^^^^^^^^^
class Prism::RescueModifierNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      expression: Prism::Node,
      keyword_loc: Prism::Location,
      rescue_expression: Prism::Node,
      location: Prism::Location
    ).void
  end
  def initialize(source, expression, keyword_loc, rescue_expression, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      expression: Prism::Node,
      keyword_loc: Prism::Location,
      rescue_expression: Prism::Node,
      location: Prism::Location
    ).returns(Prism::RescueModifierNode)
  end
  def copy(expression: self.expression, keyword_loc: self.keyword_loc, rescue_expression: self.rescue_expression, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Prism::Node) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(Prism::Node) }
  def rescue_expression; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a rescue statement.
#
#     begin
#     rescue Foo, *splat, Bar => ex
#       foo
#     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
#     end
#
# `Foo, *splat, Bar` are in the `exceptions` field. `ex` is in the `exception` field.
class Prism::RescueNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      keyword_loc: Prism::Location,
      exceptions: T::Array[Prism::Node],
      operator_loc: T.nilable(Prism::Location),
      reference: T.nilable(Prism::Node),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::RescueNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, keyword_loc, exceptions, operator_loc, reference, statements, consequent, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(T.nilable(Prism::RescueNode)) }
  def consequent; end

  sig do
    params(
      keyword_loc: Prism::Location,
      exceptions: T::Array[Prism::Node],
      operator_loc: T.nilable(Prism::Location),
      reference: T.nilable(Prism::Node),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::RescueNode),
      location: Prism::Location
    ).returns(Prism::RescueNode)
  end
  def copy(keyword_loc: self.keyword_loc, exceptions: self.exceptions, operator_loc: self.operator_loc, reference: self.reference, statements: self.statements, consequent: self.consequent, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Array[Prism::Node]) }
  def exceptions; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(T.nilable(String)) }
  def operator; end

  sig { returns(T.nilable(Prism::Location)) }
  def operator_loc; end

  sig { returns(T.nilable(Prism::Node)) }
  def reference; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a rest parameter to a method, block, or lambda definition.
#
#     def a(*b)
#           ^^
#     end
class Prism::RestParameterNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, name, name_loc, operator_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      name: T.nilable(Symbol),
      name_loc: T.nilable(Prism::Location),
      operator_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::RestParameterNode)
  end
  def copy(flags: self.flags, name: self.name, name_loc: self.name_loc, operator_loc: self.operator_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(Symbol)) }
  def name; end

  sig { returns(T.nilable(Prism::Location)) }
  def name_loc; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { returns(T::Boolean) }
  def repeated_parameter?; end

  sig { override.returns(Symbol) }
  def type; end
end

class Prism::Result
  sig do
    params(
      comments: T::Array[Prism::Comment],
      magic_comments: T::Array[Prism::MagicComment],
      data_loc: T.nilable(Prism::Location),
      errors: T::Array[Prism::ParseError],
      warnings: T::Array[Prism::ParseWarning],
      source: Prism::Source
    ).void
  end
  def initialize(comments, magic_comments, data_loc, errors, warnings, source); end

  sig { returns(T::Array[Prism::Comment]) }
  def comments; end

  sig { returns(T.nilable(Prism::Location)) }
  def data_loc; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Encoding) }
  def encoding; end

  sig { returns(T::Array[Prism::ParseError]) }
  def errors; end

  sig { returns(T::Boolean) }
  def failure?; end

  sig { returns(T::Array[Prism::MagicComment]) }
  def magic_comments; end

  sig { returns(Prism::Source) }
  def source; end

  sig { returns(T::Boolean) }
  def success?; end

  sig { returns(T::Array[Prism::ParseWarning]) }
  def warnings; end
end

# Represents the use of the `retry` keyword.
#
#     retry
#     ^^^^^
class Prism::RetryNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::RetryNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `return` keyword.
#
#     return 1
#     ^^^^^^^^
class Prism::ReturnNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      keyword_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, keyword_loc, arguments, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      keyword_loc: Prism::Location,
      arguments: T.nilable(Prism::ArgumentsNode),
      location: Prism::Location
    ).returns(Prism::ReturnNode)
  end
  def copy(flags: self.flags, keyword_loc: self.keyword_loc, arguments: self.arguments, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(T::Boolean) }
  def redundant?; end

  sig { override.returns(Symbol) }
  def type; end
end

# Flags for return nodes.
module Prism::ReturnNodeFlags
  # a return statement that is redundant because it is the last statement in a method
  REDUNDANT = T.let(1 << 0, Integer)
end

# Represents the `self` keyword.
#
#     self
#     ^^^^
class Prism::SelfNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::SelfNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# This node wraps a constant write to indicate that when the value is written, it should have its shareability state modified.
#
#     # shareable_constant_value: literal
#     C = { a: 1 }
#     ^^^^^^^^^^^^
class Prism::ShareableConstantNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      write: T.any(Prism::ConstantWriteNode, Prism::ConstantAndWriteNode, Prism::ConstantOrWriteNode, Prism::ConstantOperatorWriteNode, Prism::ConstantPathWriteNode, Prism::ConstantPathAndWriteNode, Prism::ConstantPathOrWriteNode, Prism::ConstantPathOperatorWriteNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, write, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      write: T.any(Prism::ConstantWriteNode, Prism::ConstantAndWriteNode, Prism::ConstantOrWriteNode, Prism::ConstantOperatorWriteNode, Prism::ConstantPathWriteNode, Prism::ConstantPathAndWriteNode, Prism::ConstantPathOrWriteNode, Prism::ConstantPathOperatorWriteNode),
      location: Prism::Location
    ).returns(Prism::ShareableConstantNode)
  end
  def copy(flags: self.flags, write: self.write, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T::Boolean) }
  def experimental_copy?; end

  sig { returns(T::Boolean) }
  def experimental_everything?; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Boolean) }
  def literal?; end

  sig { override.returns(Symbol) }
  def type; end

  sig do
    returns(T.any(Prism::ConstantWriteNode, Prism::ConstantAndWriteNode, Prism::ConstantOrWriteNode, Prism::ConstantOperatorWriteNode, Prism::ConstantPathWriteNode, Prism::ConstantPathAndWriteNode, Prism::ConstantPathOrWriteNode, Prism::ConstantPathOperatorWriteNode))
  end
  def write; end
end

# Flags for shareable constant nodes.
module Prism::ShareableConstantNodeFlags
  # constant writes that should be modified with shareable constant value experimental copy
  EXPERIMENTAL_COPY = T.let(1 << 2, Integer)

  # constant writes that should be modified with shareable constant value experimental everything
  EXPERIMENTAL_EVERYTHING = T.let(1 << 1, Integer)

  # constant writes that should be modified with shareable constant value literal
  LITERAL = T.let(1 << 0, Integer)
end

# Represents a singleton class declaration involving the `class` keyword.
#
#     class << self end
#     ^^^^^^^^^^^^^^^^^
class Prism::SingletonClassNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      operator_loc: Prism::Location,
      expression: Prism::Node,
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, locals, class_keyword_loc, operator_loc, expression, body, end_keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::Node)) }
  def body; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def class_keyword; end

  sig { returns(Prism::Location) }
  def class_keyword_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      locals: T::Array[Symbol],
      class_keyword_loc: Prism::Location,
      operator_loc: Prism::Location,
      expression: Prism::Node,
      body: T.nilable(Prism::Node),
      end_keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::SingletonClassNode)
  end
  def copy(locals: self.locals, class_keyword_loc: self.class_keyword_loc, operator_loc: self.operator_loc, expression: self.expression, body: self.body, end_keyword_loc: self.end_keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(String) }
  def end_keyword; end

  sig { returns(Prism::Location) }
  def end_keyword_loc; end

  sig { returns(Prism::Node) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Array[Symbol]) }
  def locals; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

class Prism::Source
  sig { params(source: String, start_line: Integer, offsets: T::Array[Integer]).void }
  def initialize(source, start_line = 1, offsets = []); end

  sig { params(byte_offset: Integer).returns(Integer) }
  def character_column(byte_offset); end

  sig { params(byte_offset: Integer).returns(Integer) }
  def character_offset(byte_offset); end

  sig { params(byte_offset: Integer, encoding: Encoding).returns(Integer) }
  def code_units_column(byte_offset, encoding); end

  sig { params(byte_offset: Integer, encoding: Encoding).returns(Integer) }
  def code_units_offset(byte_offset, encoding); end

  sig { params(byte_offset: Integer).returns(Integer) }
  def column(byte_offset); end

  sig { returns(Encoding) }
  def encoding; end

  sig { params(byte_offset: Integer).returns(Integer) }
  def line(byte_offset); end

  sig { params(byte_offset: Integer).returns(Integer) }
  def line_start(byte_offset); end

  sig { returns(T::Array[String]) }
  def lines; end

  sig { returns(T::Array[Integer]) }
  def offsets; end

  sig { params(byte_offset: Integer, length: Integer).returns(String) }
  def slice(byte_offset, length); end

  sig { returns(String) }
  def source; end

  sig { returns(Integer) }
  def start_line; end
end

# Represents the use of the `__ENCODING__` keyword.
#
#     __ENCODING__
#     ^^^^^^^^^^^^
class Prism::SourceEncodingNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::SourceEncodingNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `__FILE__` keyword.
#
#     __FILE__
#     ^^^^^^^^
class Prism::SourceFileNode < Prism::Node
  sig { params(source: Prism::Source, flags: Integer, filepath: String, location: Prism::Location).void }
  def initialize(source, flags, filepath, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(flags: Integer, filepath: String, location: Prism::Location).returns(Prism::SourceFileNode) }
  def copy(flags: self.flags, filepath: self.filepath, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(String) }
  def filepath; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  sig { returns(T::Boolean) }
  def frozen?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Boolean) }
  def mutable?; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `__LINE__` keyword.
#
#     __LINE__
#     ^^^^^^^^
class Prism::SourceLineNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::SourceLineNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the splat operator.
#
#     [*a]
#      ^^
class Prism::SplatNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      operator_loc: Prism::Location,
      expression: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(source, operator_loc, expression, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      operator_loc: Prism::Location,
      expression: T.nilable(Prism::Node),
      location: Prism::Location
    ).returns(Prism::SplatNode)
  end
  def copy(operator_loc: self.operator_loc, expression: self.expression, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T.nilable(Prism::Node)) }
  def expression; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def operator; end

  sig { returns(Prism::Location) }
  def operator_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents a set of statements contained within some scope.
#
#     foo; bar; baz
#     ^^^^^^^^^^^^^
class Prism::StatementsNode < Prism::Node
  sig { params(source: Prism::Source, body: T::Array[Prism::Node], location: Prism::Location).void }
  def initialize(source, body, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Array[Prism::Node]) }
  def body; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(body: T::Array[Prism::Node], location: Prism::Location).returns(Prism::StatementsNode) }
  def copy(body: self.body, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Flags for string nodes.
module Prism::StringFlags
  # internal bytes forced the encoding to binary
  FORCED_BINARY_ENCODING = T.let(1 << 1, Integer)

  # internal bytes forced the encoding to UTF-8
  FORCED_UTF8_ENCODING = T.let(1 << 0, Integer)

  # frozen by virtue of a `frozen_string_literal: true` comment or `--enable-frozen-string-literal`
  FROZEN = T.let(1 << 2, Integer)

  # mutable by virtue of a `frozen_string_literal: false` comment or `--disable-frozen-string-literal`
  MUTABLE = T.let(1 << 3, Integer)
end

# Represents a string literal, a string contained within a `%w` list, or plain string content within an interpolated string.
#
#     "foo"
#     ^^^^^
#
#     %w[foo]
#        ^^^
#
#     "foo #{bar} baz"
#      ^^^^      ^^^^
class Prism::StringNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      content_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T.nilable(String)) }
  def closing; end

  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(String) }
  def content; end

  sig { returns(Prism::Location) }
  def content_loc; end

  sig do
    params(
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      content_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      unescaped: String,
      location: Prism::Location
    ).returns(Prism::StringNode)
  end
  def copy(flags: self.flags, opening_loc: self.opening_loc, content_loc: self.content_loc, closing_loc: self.closing_loc, unescaped: self.unescaped, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  sig { returns(T::Boolean) }
  def frozen?; end

  sig { returns(T::Boolean) }
  def heredoc?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T::Boolean) }
  def mutable?; end

  sig { returns(T.nilable(String)) }
  def opening; end

  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  sig { returns(Prism::InterpolatedStringNode) }
  def to_interpolated; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(String) }
  def unescaped; end
end

# Represents the use of the `super` keyword with parentheses or arguments.
#
#     super()
#     ^^^^^^^
#
#     super foo, bar
#     ^^^^^^^^^^^^^^
class Prism::SuperNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).void
  end
  def initialize(source, keyword_loc, lparen_loc, arguments, rparen_loc, block, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  sig { returns(T.nilable(Prism::Node)) }
  def block; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      block: T.nilable(Prism::Node),
      location: Prism::Location
    ).returns(Prism::SuperNode)
  end
  def copy(keyword_loc: self.keyword_loc, lparen_loc: self.lparen_loc, arguments: self.arguments, rparen_loc: self.rparen_loc, block: self.block, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(T.nilable(String)) }
  def lparen; end

  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  sig { returns(T.nilable(String)) }
  def rparen; end

  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Flags for symbol nodes.
module Prism::SymbolFlags
  # internal bytes forced the encoding to binary
  FORCED_BINARY_ENCODING = T.let(1 << 1, Integer)

  # internal bytes forced the encoding to US-ASCII
  FORCED_US_ASCII_ENCODING = T.let(1 << 2, Integer)

  # internal bytes forced the encoding to UTF-8
  FORCED_UTF8_ENCODING = T.let(1 << 0, Integer)
end

# Represents a symbol literal or a symbol contained within a `%i` list.
#
#     :foo
#     ^^^^
#
#     %i[foo]
#        ^^^
class Prism::SymbolNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      value_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, value_loc, closing_loc, unescaped, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T.nilable(String)) }
  def closing; end

  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      opening_loc: T.nilable(Prism::Location),
      value_loc: T.nilable(Prism::Location),
      closing_loc: T.nilable(Prism::Location),
      unescaped: String,
      location: Prism::Location
    ).returns(Prism::SymbolNode)
  end
  def copy(flags: self.flags, opening_loc: self.opening_loc, value_loc: self.value_loc, closing_loc: self.closing_loc, unescaped: self.unescaped, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  sig { returns(T::Boolean) }
  def forced_us_ascii_encoding?; end

  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(T.nilable(String)) }
  def opening; end

  sig { returns(T.nilable(Prism::Location)) }
  def opening_loc; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(String) }
  def unescaped; end

  sig { returns(T.nilable(String)) }
  def value; end

  sig { returns(T.nilable(Prism::Location)) }
  def value_loc; end
end

class Prism::Token
  sig { params(source: Prism::Source, type: Symbol, value: String, location: T.any(Integer, Prism::Location)).void }
  def initialize(source, type, value, location); end

  sig { params(other: T.untyped).returns(T::Boolean) }
  def ==(other); end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(Prism::Location) }
  def location; end

  sig { params(q: T.untyped).void }
  def pretty_print(q); end

  sig { returns(Prism::Source) }
  def source; end

  sig { returns(Symbol) }
  def type; end

  sig { returns(String) }
  def value; end
end

class Prism::Translation::Parser < Parser::Base
  sig { overridable.returns(Integer) }
  def version; end
end

class Prism::Translation::Parser33 < Prism::Translation::Parser
  sig { override.returns(Integer) }
  def version; end
end

class Prism::Translation::Parser34 < Prism::Translation::Parser
  sig { override.returns(Integer) }
  def version; end
end

class Prism::Translation::Ripper < Prism::Compiler
  sig { returns(T::Boolean) }
  def error?; end

  sig { returns(T.untyped) }
  def parse; end

  class << self
    sig { params(source: String, filename: String, lineno: Integer, raise_errors: T.untyped).returns(T.untyped) }
    def sexp(source, filename = "-", lineno = 1, raise_errors: false); end

    sig { params(source: String, filename: String, lineno: Integer, raise_errors: T.untyped).returns(T.untyped) }
    def sexp_raw(source, filename = "-", lineno = 1, raise_errors: false); end
  end
end

# Represents the use of the literal `true` keyword.
#
#     true
#     ^^^^
class Prism::TrueNode < Prism::Node
  sig { params(source: Prism::Source, location: Prism::Location).void }
  def initialize(source, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { params(location: Prism::Location).returns(Prism::TrueNode) }
  def copy(location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `undef` keyword.
#
#     undef :foo, :bar, :baz
#     ^^^^^^^^^^^^^^^^^^^^^^
class Prism::UndefNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      names: T::Array[T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode)],
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).void
  end
  def initialize(source, names, keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      names: T::Array[T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode)],
      keyword_loc: Prism::Location,
      location: Prism::Location
    ).returns(Prism::UndefNode)
  end
  def copy(names: self.names, keyword_loc: self.keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(T::Array[T.any(Prism::SymbolNode, Prism::InterpolatedSymbolNode)]) }
  def names; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `unless` keyword, either in the block form or the modifier form.
#
#     bar unless foo
#     ^^^^^^^^^^^^^^
#
#     unless foo then bar end
#     ^^^^^^^^^^^^^^^^^^^^^^^
class Prism::UnlessNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      keyword_loc: Prism::Location,
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::ElseNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, keyword_loc, predicate, then_keyword_loc, statements, consequent, end_keyword_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(T.nilable(Prism::ElseNode)) }
  def consequent; end

  sig do
    params(
      keyword_loc: Prism::Location,
      predicate: Prism::Node,
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      consequent: T.nilable(Prism::ElseNode),
      end_keyword_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::UnlessNode)
  end
  def copy(keyword_loc: self.keyword_loc, predicate: self.predicate, then_keyword_loc: self.then_keyword_loc, statements: self.statements, consequent: self.consequent, end_keyword_loc: self.end_keyword_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { returns(T.nilable(String)) }
  def end_keyword; end

  sig { returns(T.nilable(Prism::Location)) }
  def end_keyword_loc; end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(Prism::Node) }
  def predicate; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { returns(T.nilable(String)) }
  def then_keyword; end

  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `until` keyword, either in the block form or the modifier form.
#
#     bar until foo
#     ^^^^^^^^^^^^^
#
#     until foo do bar end
#     ^^^^^^^^^^^^^^^^^^^^
class Prism::UntilNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      keyword_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, keyword_loc, closing_loc, predicate, statements, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Boolean) }
  def begin_modifier?; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T.nilable(String)) }
  def closing; end

  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      keyword_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).returns(Prism::UntilNode)
  end
  def copy(flags: self.flags, keyword_loc: self.keyword_loc, closing_loc: self.closing_loc, predicate: self.predicate, statements: self.statements, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(Prism::Node) }
  def predicate; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { override.returns(Symbol) }
  def type; end
end

class Prism::Visitor < Prism::BasicVisitor
  sig { params(node: Prism::AliasGlobalVariableNode).void }
  def visit_alias_global_variable_node(node); end

  sig { params(node: Prism::AliasMethodNode).void }
  def visit_alias_method_node(node); end

  sig { params(node: Prism::AlternationPatternNode).void }
  def visit_alternation_pattern_node(node); end

  sig { params(node: Prism::AndNode).void }
  def visit_and_node(node); end

  sig { params(node: Prism::ArgumentsNode).void }
  def visit_arguments_node(node); end

  sig { params(node: Prism::ArrayNode).void }
  def visit_array_node(node); end

  sig { params(node: Prism::ArrayPatternNode).void }
  def visit_array_pattern_node(node); end

  sig { params(node: Prism::AssocNode).void }
  def visit_assoc_node(node); end

  sig { params(node: Prism::AssocSplatNode).void }
  def visit_assoc_splat_node(node); end

  sig { params(node: Prism::BackReferenceReadNode).void }
  def visit_back_reference_read_node(node); end

  sig { params(node: Prism::BeginNode).void }
  def visit_begin_node(node); end

  sig { params(node: Prism::BlockArgumentNode).void }
  def visit_block_argument_node(node); end

  sig { params(node: Prism::BlockLocalVariableNode).void }
  def visit_block_local_variable_node(node); end

  sig { params(node: Prism::BlockNode).void }
  def visit_block_node(node); end

  sig { params(node: Prism::BlockParameterNode).void }
  def visit_block_parameter_node(node); end

  sig { params(node: Prism::BlockParametersNode).void }
  def visit_block_parameters_node(node); end

  sig { params(node: Prism::BreakNode).void }
  def visit_break_node(node); end

  sig { params(node: Prism::CallAndWriteNode).void }
  def visit_call_and_write_node(node); end

  sig { params(node: Prism::CallNode).void }
  def visit_call_node(node); end

  sig { params(node: Prism::CallOperatorWriteNode).void }
  def visit_call_operator_write_node(node); end

  sig { params(node: Prism::CallOrWriteNode).void }
  def visit_call_or_write_node(node); end

  sig { params(node: Prism::CallTargetNode).void }
  def visit_call_target_node(node); end

  sig { params(node: Prism::CapturePatternNode).void }
  def visit_capture_pattern_node(node); end

  sig { params(node: Prism::CaseMatchNode).void }
  def visit_case_match_node(node); end

  sig { params(node: Prism::CaseNode).void }
  def visit_case_node(node); end

  sig { params(node: Prism::ClassNode).void }
  def visit_class_node(node); end

  sig { params(node: Prism::ClassVariableAndWriteNode).void }
  def visit_class_variable_and_write_node(node); end

  sig { params(node: Prism::ClassVariableOperatorWriteNode).void }
  def visit_class_variable_operator_write_node(node); end

  sig { params(node: Prism::ClassVariableOrWriteNode).void }
  def visit_class_variable_or_write_node(node); end

  sig { params(node: Prism::ClassVariableReadNode).void }
  def visit_class_variable_read_node(node); end

  sig { params(node: Prism::ClassVariableTargetNode).void }
  def visit_class_variable_target_node(node); end

  sig { params(node: Prism::ClassVariableWriteNode).void }
  def visit_class_variable_write_node(node); end

  sig { params(node: Prism::ConstantAndWriteNode).void }
  def visit_constant_and_write_node(node); end

  sig { params(node: Prism::ConstantOperatorWriteNode).void }
  def visit_constant_operator_write_node(node); end

  sig { params(node: Prism::ConstantOrWriteNode).void }
  def visit_constant_or_write_node(node); end

  sig { params(node: Prism::ConstantPathAndWriteNode).void }
  def visit_constant_path_and_write_node(node); end

  sig { params(node: Prism::ConstantPathNode).void }
  def visit_constant_path_node(node); end

  sig { params(node: Prism::ConstantPathOperatorWriteNode).void }
  def visit_constant_path_operator_write_node(node); end

  sig { params(node: Prism::ConstantPathOrWriteNode).void }
  def visit_constant_path_or_write_node(node); end

  sig { params(node: Prism::ConstantPathTargetNode).void }
  def visit_constant_path_target_node(node); end

  sig { params(node: Prism::ConstantPathWriteNode).void }
  def visit_constant_path_write_node(node); end

  sig { params(node: Prism::ConstantReadNode).void }
  def visit_constant_read_node(node); end

  sig { params(node: Prism::ConstantTargetNode).void }
  def visit_constant_target_node(node); end

  sig { params(node: Prism::ConstantWriteNode).void }
  def visit_constant_write_node(node); end

  sig { params(node: Prism::DefNode).void }
  def visit_def_node(node); end

  sig { params(node: Prism::DefinedNode).void }
  def visit_defined_node(node); end

  sig { params(node: Prism::ElseNode).void }
  def visit_else_node(node); end

  sig { params(node: Prism::EmbeddedStatementsNode).void }
  def visit_embedded_statements_node(node); end

  sig { params(node: Prism::EmbeddedVariableNode).void }
  def visit_embedded_variable_node(node); end

  sig { params(node: Prism::EnsureNode).void }
  def visit_ensure_node(node); end

  sig { params(node: Prism::FalseNode).void }
  def visit_false_node(node); end

  sig { params(node: Prism::FindPatternNode).void }
  def visit_find_pattern_node(node); end

  sig { params(node: Prism::FlipFlopNode).void }
  def visit_flip_flop_node(node); end

  sig { params(node: Prism::FloatNode).void }
  def visit_float_node(node); end

  sig { params(node: Prism::ForNode).void }
  def visit_for_node(node); end

  sig { params(node: Prism::ForwardingArgumentsNode).void }
  def visit_forwarding_arguments_node(node); end

  sig { params(node: Prism::ForwardingParameterNode).void }
  def visit_forwarding_parameter_node(node); end

  sig { params(node: Prism::ForwardingSuperNode).void }
  def visit_forwarding_super_node(node); end

  sig { params(node: Prism::GlobalVariableAndWriteNode).void }
  def visit_global_variable_and_write_node(node); end

  sig { params(node: Prism::GlobalVariableOperatorWriteNode).void }
  def visit_global_variable_operator_write_node(node); end

  sig { params(node: Prism::GlobalVariableOrWriteNode).void }
  def visit_global_variable_or_write_node(node); end

  sig { params(node: Prism::GlobalVariableReadNode).void }
  def visit_global_variable_read_node(node); end

  sig { params(node: Prism::GlobalVariableTargetNode).void }
  def visit_global_variable_target_node(node); end

  sig { params(node: Prism::GlobalVariableWriteNode).void }
  def visit_global_variable_write_node(node); end

  sig { params(node: Prism::HashNode).void }
  def visit_hash_node(node); end

  sig { params(node: Prism::HashPatternNode).void }
  def visit_hash_pattern_node(node); end

  sig { params(node: Prism::IfNode).void }
  def visit_if_node(node); end

  sig { params(node: Prism::ImaginaryNode).void }
  def visit_imaginary_node(node); end

  sig { params(node: Prism::ImplicitNode).void }
  def visit_implicit_node(node); end

  sig { params(node: Prism::ImplicitRestNode).void }
  def visit_implicit_rest_node(node); end

  sig { params(node: Prism::InNode).void }
  def visit_in_node(node); end

  sig { params(node: Prism::IndexAndWriteNode).void }
  def visit_index_and_write_node(node); end

  sig { params(node: Prism::IndexOperatorWriteNode).void }
  def visit_index_operator_write_node(node); end

  sig { params(node: Prism::IndexOrWriteNode).void }
  def visit_index_or_write_node(node); end

  sig { params(node: Prism::IndexTargetNode).void }
  def visit_index_target_node(node); end

  sig { params(node: Prism::InstanceVariableAndWriteNode).void }
  def visit_instance_variable_and_write_node(node); end

  sig { params(node: Prism::InstanceVariableOperatorWriteNode).void }
  def visit_instance_variable_operator_write_node(node); end

  sig { params(node: Prism::InstanceVariableOrWriteNode).void }
  def visit_instance_variable_or_write_node(node); end

  sig { params(node: Prism::InstanceVariableReadNode).void }
  def visit_instance_variable_read_node(node); end

  sig { params(node: Prism::InstanceVariableTargetNode).void }
  def visit_instance_variable_target_node(node); end

  sig { params(node: Prism::InstanceVariableWriteNode).void }
  def visit_instance_variable_write_node(node); end

  sig { params(node: Prism::IntegerNode).void }
  def visit_integer_node(node); end

  sig { params(node: Prism::InterpolatedMatchLastLineNode).void }
  def visit_interpolated_match_last_line_node(node); end

  sig { params(node: Prism::InterpolatedRegularExpressionNode).void }
  def visit_interpolated_regular_expression_node(node); end

  sig { params(node: Prism::InterpolatedStringNode).void }
  def visit_interpolated_string_node(node); end

  sig { params(node: Prism::InterpolatedSymbolNode).void }
  def visit_interpolated_symbol_node(node); end

  sig { params(node: Prism::InterpolatedXStringNode).void }
  def visit_interpolated_x_string_node(node); end

  sig { params(node: Prism::ItLocalVariableReadNode).void }
  def visit_it_local_variable_read_node(node); end

  sig { params(node: Prism::ItParametersNode).void }
  def visit_it_parameters_node(node); end

  sig { params(node: Prism::KeywordHashNode).void }
  def visit_keyword_hash_node(node); end

  sig { params(node: Prism::KeywordRestParameterNode).void }
  def visit_keyword_rest_parameter_node(node); end

  sig { params(node: Prism::LambdaNode).void }
  def visit_lambda_node(node); end

  sig { params(node: Prism::LocalVariableAndWriteNode).void }
  def visit_local_variable_and_write_node(node); end

  sig { params(node: Prism::LocalVariableOperatorWriteNode).void }
  def visit_local_variable_operator_write_node(node); end

  sig { params(node: Prism::LocalVariableOrWriteNode).void }
  def visit_local_variable_or_write_node(node); end

  sig { params(node: Prism::LocalVariableReadNode).void }
  def visit_local_variable_read_node(node); end

  sig { params(node: Prism::LocalVariableTargetNode).void }
  def visit_local_variable_target_node(node); end

  sig { params(node: Prism::LocalVariableWriteNode).void }
  def visit_local_variable_write_node(node); end

  sig { params(node: Prism::MatchLastLineNode).void }
  def visit_match_last_line_node(node); end

  sig { params(node: Prism::MatchPredicateNode).void }
  def visit_match_predicate_node(node); end

  sig { params(node: Prism::MatchRequiredNode).void }
  def visit_match_required_node(node); end

  sig { params(node: Prism::MatchWriteNode).void }
  def visit_match_write_node(node); end

  sig { params(node: Prism::MissingNode).void }
  def visit_missing_node(node); end

  sig { params(node: Prism::ModuleNode).void }
  def visit_module_node(node); end

  sig { params(node: Prism::MultiTargetNode).void }
  def visit_multi_target_node(node); end

  sig { params(node: Prism::MultiWriteNode).void }
  def visit_multi_write_node(node); end

  sig { params(node: Prism::NextNode).void }
  def visit_next_node(node); end

  sig { params(node: Prism::NilNode).void }
  def visit_nil_node(node); end

  sig { params(node: Prism::NoKeywordsParameterNode).void }
  def visit_no_keywords_parameter_node(node); end

  sig { params(node: Prism::NumberedParametersNode).void }
  def visit_numbered_parameters_node(node); end

  sig { params(node: Prism::NumberedReferenceReadNode).void }
  def visit_numbered_reference_read_node(node); end

  sig { params(node: Prism::OptionalKeywordParameterNode).void }
  def visit_optional_keyword_parameter_node(node); end

  sig { params(node: Prism::OptionalParameterNode).void }
  def visit_optional_parameter_node(node); end

  sig { params(node: Prism::OrNode).void }
  def visit_or_node(node); end

  sig { params(node: Prism::ParametersNode).void }
  def visit_parameters_node(node); end

  sig { params(node: Prism::ParenthesesNode).void }
  def visit_parentheses_node(node); end

  sig { params(node: Prism::PinnedExpressionNode).void }
  def visit_pinned_expression_node(node); end

  sig { params(node: Prism::PinnedVariableNode).void }
  def visit_pinned_variable_node(node); end

  sig { params(node: Prism::PostExecutionNode).void }
  def visit_post_execution_node(node); end

  sig { params(node: Prism::PreExecutionNode).void }
  def visit_pre_execution_node(node); end

  sig { params(node: Prism::ProgramNode).void }
  def visit_program_node(node); end

  sig { params(node: Prism::RangeNode).void }
  def visit_range_node(node); end

  sig { params(node: Prism::RationalNode).void }
  def visit_rational_node(node); end

  sig { params(node: Prism::RedoNode).void }
  def visit_redo_node(node); end

  sig { params(node: Prism::RegularExpressionNode).void }
  def visit_regular_expression_node(node); end

  sig { params(node: Prism::RequiredKeywordParameterNode).void }
  def visit_required_keyword_parameter_node(node); end

  sig { params(node: Prism::RequiredParameterNode).void }
  def visit_required_parameter_node(node); end

  sig { params(node: Prism::RescueModifierNode).void }
  def visit_rescue_modifier_node(node); end

  sig { params(node: Prism::RescueNode).void }
  def visit_rescue_node(node); end

  sig { params(node: Prism::RestParameterNode).void }
  def visit_rest_parameter_node(node); end

  sig { params(node: Prism::RetryNode).void }
  def visit_retry_node(node); end

  sig { params(node: Prism::ReturnNode).void }
  def visit_return_node(node); end

  sig { params(node: Prism::SelfNode).void }
  def visit_self_node(node); end

  sig { params(node: Prism::ShareableConstantNode).void }
  def visit_shareable_constant_node(node); end

  sig { params(node: Prism::SingletonClassNode).void }
  def visit_singleton_class_node(node); end

  sig { params(node: Prism::SourceEncodingNode).void }
  def visit_source_encoding_node(node); end

  sig { params(node: Prism::SourceFileNode).void }
  def visit_source_file_node(node); end

  sig { params(node: Prism::SourceLineNode).void }
  def visit_source_line_node(node); end

  sig { params(node: Prism::SplatNode).void }
  def visit_splat_node(node); end

  sig { params(node: Prism::StatementsNode).void }
  def visit_statements_node(node); end

  sig { params(node: Prism::StringNode).void }
  def visit_string_node(node); end

  sig { params(node: Prism::SuperNode).void }
  def visit_super_node(node); end

  sig { params(node: Prism::SymbolNode).void }
  def visit_symbol_node(node); end

  sig { params(node: Prism::TrueNode).void }
  def visit_true_node(node); end

  sig { params(node: Prism::UndefNode).void }
  def visit_undef_node(node); end

  sig { params(node: Prism::UnlessNode).void }
  def visit_unless_node(node); end

  sig { params(node: Prism::UntilNode).void }
  def visit_until_node(node); end

  sig { params(node: Prism::WhenNode).void }
  def visit_when_node(node); end

  sig { params(node: Prism::WhileNode).void }
  def visit_while_node(node); end

  sig { params(node: Prism::XStringNode).void }
  def visit_x_string_node(node); end

  sig { params(node: Prism::YieldNode).void }
  def visit_yield_node(node); end
end

# Represents the use of the `when` keyword within a case statement.
#
#     case true
#     when true
#     ^^^^^^^^^
#     end
class Prism::WhenNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      keyword_loc: Prism::Location,
      conditions: T::Array[Prism::Node],
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, keyword_loc, conditions, then_keyword_loc, statements, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(T::Array[Prism::Node]) }
  def conditions; end

  sig do
    params(
      keyword_loc: Prism::Location,
      conditions: T::Array[Prism::Node],
      then_keyword_loc: T.nilable(Prism::Location),
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).returns(Prism::WhenNode)
  end
  def copy(keyword_loc: self.keyword_loc, conditions: self.conditions, then_keyword_loc: self.then_keyword_loc, statements: self.statements, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { returns(T.nilable(String)) }
  def then_keyword; end

  sig { returns(T.nilable(Prism::Location)) }
  def then_keyword_loc; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents the use of the `while` keyword, either in the block form or the modifier form.
#
#     bar while foo
#     ^^^^^^^^^^^^^
#
#     while foo do bar end
#     ^^^^^^^^^^^^^^^^^^^^
class Prism::WhileNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      keyword_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, keyword_loc, closing_loc, predicate, statements, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T::Boolean) }
  def begin_modifier?; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(T.nilable(String)) }
  def closing; end

  sig { returns(T.nilable(Prism::Location)) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      flags: Integer,
      keyword_loc: Prism::Location,
      closing_loc: T.nilable(Prism::Location),
      predicate: Prism::Node,
      statements: T.nilable(Prism::StatementsNode),
      location: Prism::Location
    ).returns(Prism::WhileNode)
  end
  def copy(flags: self.flags, keyword_loc: self.keyword_loc, closing_loc: self.closing_loc, predicate: self.predicate, statements: self.statements, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(Prism::Node) }
  def predicate; end

  sig { returns(T.nilable(Prism::StatementsNode)) }
  def statements; end

  sig { override.returns(Symbol) }
  def type; end
end

# Represents an xstring literal with no interpolation.
#
#     `foo`
#     ^^^^^
class Prism::XStringNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).void
  end
  def initialize(source, flags, opening_loc, content_loc, closing_loc, unescaped, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { returns(String) }
  def closing; end

  sig { returns(Prism::Location) }
  def closing_loc; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig { returns(String) }
  def content; end

  sig { returns(Prism::Location) }
  def content_loc; end

  sig do
    params(
      flags: Integer,
      opening_loc: Prism::Location,
      content_loc: Prism::Location,
      closing_loc: Prism::Location,
      unescaped: String,
      location: Prism::Location
    ).returns(Prism::XStringNode)
  end
  def copy(flags: self.flags, opening_loc: self.opening_loc, content_loc: self.content_loc, closing_loc: self.closing_loc, unescaped: self.unescaped, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { returns(Integer) }
  def flags; end

  sig { returns(T::Boolean) }
  def forced_binary_encoding?; end

  sig { returns(T::Boolean) }
  def forced_utf8_encoding?; end

  sig { returns(T::Boolean) }
  def heredoc?; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def opening; end

  sig { returns(Prism::Location) }
  def opening_loc; end

  sig { returns(Prism::InterpolatedXStringNode) }
  def to_interpolated; end

  sig { override.returns(Symbol) }
  def type; end

  sig { returns(String) }
  def unescaped; end
end

# Represents the use of the `yield` keyword.
#
#     yield 1
#     ^^^^^^^
class Prism::YieldNode < Prism::Node
  sig do
    params(
      source: Prism::Source,
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).void
  end
  def initialize(source, keyword_loc, lparen_loc, arguments, rparen_loc, location); end

  sig { override.params(visitor: Prism::Visitor).returns(T.untyped) }
  def accept(visitor); end

  sig { returns(T.nilable(Prism::ArgumentsNode)) }
  def arguments; end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def child_nodes; end

  sig { override.returns(T::Array[T.any(Prism::Node, Prism::Location)]) }
  def comment_targets; end

  sig { override.returns(T::Array[Prism::Node]) }
  def compact_child_nodes; end

  sig do
    params(
      keyword_loc: Prism::Location,
      lparen_loc: T.nilable(Prism::Location),
      arguments: T.nilable(Prism::ArgumentsNode),
      rparen_loc: T.nilable(Prism::Location),
      location: Prism::Location
    ).returns(Prism::YieldNode)
  end
  def copy(keyword_loc: self.keyword_loc, lparen_loc: self.lparen_loc, arguments: self.arguments, rparen_loc: self.rparen_loc, location: self.location); end

  sig { override.returns(T::Array[T.nilable(Prism::Node)]) }
  def deconstruct; end

  sig { params(keys: T.nilable(T::Array[Symbol])).returns(T::Hash[Symbol, T.untyped]) }
  def deconstruct_keys(keys); end

  sig { override.returns(T::Array[Prism::Reflection::Field]) }
  def fields; end

  sig { override.returns(String) }
  def inspect; end

  sig { returns(String) }
  def keyword; end

  sig { returns(Prism::Location) }
  def keyword_loc; end

  sig { returns(T.nilable(String)) }
  def lparen; end

  sig { returns(T.nilable(Prism::Location)) }
  def lparen_loc; end

  sig { returns(T.nilable(String)) }
  def rparen; end

  sig { returns(T.nilable(Prism::Location)) }
  def rparen_loc; end

  sig { override.returns(Symbol) }
  def type; end
end
